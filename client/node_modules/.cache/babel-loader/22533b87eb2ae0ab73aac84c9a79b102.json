{"ast":null,"code":"import { __assign } from 'tslib';\nimport { useContext, useRef, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useVisualElementContext } from '../context/MotionContext.js';\nimport { PresenceContext } from '../../components/AnimatePresence/PresenceContext.js';\nimport { isPresent } from '../../components/AnimatePresence/use-presence.js';\nimport { LayoutGroupContext } from '../../components/AnimateSharedLayout/LayoutGroupContext.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\nimport { useSnapshotOnUnmount } from '../features/layout/use-snapshot-on-unmount.js';\n\nfunction useLayoutId(_a) {\n  var layoutId = _a.layoutId;\n  var layoutGroupId = useContext(LayoutGroupContext);\n  return layoutGroupId && layoutId !== undefined ? layoutGroupId + \"-\" + layoutId : layoutId;\n}\n\nfunction useVisualElement(createVisualElement, props, isStatic, ref) {\n  var config = useContext(MotionConfigContext);\n  var parent = useVisualElementContext();\n  var presenceContext = useContext(PresenceContext);\n  var layoutId = useLayoutId(props);\n  var visualElementRef = useRef(null);\n\n  if (isStatic && visualElementRef.current) {\n    /**\n     * Clear the VisualElement state in static mode after the initial render.\n     * This will allow the VisualElement to render every render as if its the first,\n     * with no history. This is basically a cheaper way of reinstantiating the VisualElement\n     * every render.\n     */\n    visualElementRef.current.clearState(props);\n  } else if (!visualElementRef.current) {\n    visualElementRef.current = createVisualElement(isStatic, {\n      parent: parent,\n      ref: ref,\n      isStatic: isStatic,\n      props: __assign(__assign({}, props), {\n        layoutId: layoutId\n      }),\n      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,\n      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false\n    });\n  }\n\n  var visualElement = visualElementRef.current;\n  useIsomorphicLayoutEffect(function () {\n    visualElement.setProps(__assign(__assign(__assign({}, config), props), {\n      layoutId: layoutId\n    }));\n    visualElement.isPresent = isPresent(presenceContext);\n    visualElement.isPresenceRoot = !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);\n    /**\n     * Fire a render to ensure the latest state is reflected on-screen.\n     */\n\n    if (!visualElement.isStatic) visualElement.syncRender();\n  });\n  /**\n   * Don't fire unnecessary effects if this is a static component.\n   */\n\n  if (isStatic) return visualElement;\n  useEffect(function () {\n    var _a;\n    /**\n     * In a future refactor we can replace the features-as-components and\n     * have this loop through them all firing \"effect\" listeners\n     */\n\n\n    (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();\n  });\n  /**\n   * If this component is a child of AnimateSharedLayout, we need to snapshot the component\n   * before it's unmounted. This lives here rather than in features/layout/Measure because\n   * as a child component its unmount effect runs after this component has been unmounted.\n   */\n\n  useSnapshotOnUnmount(visualElement);\n  return visualElement;\n}\n\nexport { useVisualElement };","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js"],"names":["__assign","useContext","useRef","useEffect","MotionConfigContext","useVisualElementContext","PresenceContext","isPresent","LayoutGroupContext","useIsomorphicLayoutEffect","useSnapshotOnUnmount","useLayoutId","_a","layoutId","layoutGroupId","undefined","useVisualElement","createVisualElement","props","isStatic","ref","config","parent","presenceContext","visualElementRef","current","clearState","presenceId","id","blockInitialAnimation","initial","visualElement","setProps","isPresenceRoot","syncRender","animationState","animateChanges"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,mCAApC;AACA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,eAAT,QAAgC,qDAAhC;AACA,SAASC,SAAT,QAA0B,kDAA1B;AACA,SAASC,kBAAT,QAAmC,4DAAnC;AACA,SAASC,yBAAT,QAA0C,sCAA1C;AACA,SAASC,oBAAT,QAAqC,+CAArC;;AAEA,SAASC,WAAT,CAAqBC,EAArB,EAAyB;AACrB,MAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AACA,MAAIC,aAAa,GAAGb,UAAU,CAACO,kBAAD,CAA9B;AACA,SAAOM,aAAa,IAAID,QAAQ,KAAKE,SAA9B,GACDD,aAAa,GAAG,GAAhB,GAAsBD,QADrB,GAEDA,QAFN;AAGH;;AACD,SAASG,gBAAT,CAA0BC,mBAA1B,EAA+CC,KAA/C,EAAsDC,QAAtD,EAAgEC,GAAhE,EAAqE;AACjE,MAAIC,MAAM,GAAGpB,UAAU,CAACG,mBAAD,CAAvB;AACA,MAAIkB,MAAM,GAAGjB,uBAAuB,EAApC;AACA,MAAIkB,eAAe,GAAGtB,UAAU,CAACK,eAAD,CAAhC;AACA,MAAIO,QAAQ,GAAGF,WAAW,CAACO,KAAD,CAA1B;AACA,MAAIM,gBAAgB,GAAGtB,MAAM,CAAC,IAAD,CAA7B;;AACA,MAAIiB,QAAQ,IAAIK,gBAAgB,CAACC,OAAjC,EAA0C;AACtC;AACR;AACA;AACA;AACA;AACA;AACQD,IAAAA,gBAAgB,CAACC,OAAjB,CAAyBC,UAAzB,CAAoCR,KAApC;AACH,GARD,MASK,IAAI,CAACM,gBAAgB,CAACC,OAAtB,EAA+B;AAChCD,IAAAA,gBAAgB,CAACC,OAAjB,GAA2BR,mBAAmB,CAACE,QAAD,EAAW;AACrDG,MAAAA,MAAM,EAAEA,MAD6C;AAErDF,MAAAA,GAAG,EAAEA,GAFgD;AAGrDD,MAAAA,QAAQ,EAAEA,QAH2C;AAIrDD,MAAAA,KAAK,EAAElB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKkB,KAAL,CAAT,EAAsB;AAAEL,QAAAA,QAAQ,EAAEA;AAAZ,OAAtB,CAJsC;AAKrDc,MAAAA,UAAU,EAAEJ,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACK,EALzC;AAMrDC,MAAAA,qBAAqB,EAAE,CAACN,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACO,OAAnF,MAAgG;AANlE,KAAX,CAA9C;AAQH;;AACD,MAAIC,aAAa,GAAGP,gBAAgB,CAACC,OAArC;AACAhB,EAAAA,yBAAyB,CAAC,YAAY;AAClCsB,IAAAA,aAAa,CAACC,QAAd,CAAuBhC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKqB,MAAL,CAAT,EAAuBH,KAAvB,CAAT,EAAwC;AAAEL,MAAAA,QAAQ,EAAEA;AAAZ,KAAxC,CAA/B;AACAkB,IAAAA,aAAa,CAACxB,SAAd,GAA0BA,SAAS,CAACgB,eAAD,CAAnC;AACAQ,IAAAA,aAAa,CAACE,cAAd,GACI,CAACX,MAAD,IAAWA,MAAM,CAACK,UAAP,MAAuBJ,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAACK,EAAzG,CADf;AAEA;AACR;AACA;;AACQ,QAAI,CAACG,aAAa,CAACZ,QAAnB,EACIY,aAAa,CAACG,UAAd;AACP,GAVwB,CAAzB;AAWA;AACJ;AACA;;AACI,MAAIf,QAAJ,EACI,OAAOY,aAAP;AACJ5B,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIS,EAAJ;AACA;AACR;AACA;AACA;;;AACQ,KAACA,EAAE,GAAGmB,aAAa,CAACI,cAApB,MAAwC,IAAxC,IAAgDvB,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACwB,cAAH,EAAzE;AACH,GAPQ,CAAT;AAQA;AACJ;AACA;AACA;AACA;;AACI1B,EAAAA,oBAAoB,CAACqB,aAAD,CAApB;AACA,SAAOA,aAAP;AACH;;AAED,SAASf,gBAAT","sourcesContent":["import { __assign } from 'tslib';\nimport { useContext, useRef, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.js';\nimport { useVisualElementContext } from '../context/MotionContext.js';\nimport { PresenceContext } from '../../components/AnimatePresence/PresenceContext.js';\nimport { isPresent } from '../../components/AnimatePresence/use-presence.js';\nimport { LayoutGroupContext } from '../../components/AnimateSharedLayout/LayoutGroupContext.js';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.js';\nimport { useSnapshotOnUnmount } from '../features/layout/use-snapshot-on-unmount.js';\n\nfunction useLayoutId(_a) {\n    var layoutId = _a.layoutId;\n    var layoutGroupId = useContext(LayoutGroupContext);\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useVisualElement(createVisualElement, props, isStatic, ref) {\n    var config = useContext(MotionConfigContext);\n    var parent = useVisualElementContext();\n    var presenceContext = useContext(PresenceContext);\n    var layoutId = useLayoutId(props);\n    var visualElementRef = useRef(null);\n    if (isStatic && visualElementRef.current) {\n        /**\n         * Clear the VisualElement state in static mode after the initial render.\n         * This will allow the VisualElement to render every render as if its the first,\n         * with no history. This is basically a cheaper way of reinstantiating the VisualElement\n         * every render.\n         */\n        visualElementRef.current.clearState(props);\n    }\n    else if (!visualElementRef.current) {\n        visualElementRef.current = createVisualElement(isStatic, {\n            parent: parent,\n            ref: ref,\n            isStatic: isStatic,\n            props: __assign(__assign({}, props), { layoutId: layoutId }),\n            presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,\n            blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,\n        });\n    }\n    var visualElement = visualElementRef.current;\n    useIsomorphicLayoutEffect(function () {\n        visualElement.setProps(__assign(__assign(__assign({}, config), props), { layoutId: layoutId }));\n        visualElement.isPresent = isPresent(presenceContext);\n        visualElement.isPresenceRoot =\n            !parent || parent.presenceId !== (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id);\n        /**\n         * Fire a render to ensure the latest state is reflected on-screen.\n         */\n        if (!visualElement.isStatic)\n            visualElement.syncRender();\n    });\n    /**\n     * Don't fire unnecessary effects if this is a static component.\n     */\n    if (isStatic)\n        return visualElement;\n    useEffect(function () {\n        var _a;\n        /**\n         * In a future refactor we can replace the features-as-components and\n         * have this loop through them all firing \"effect\" listeners\n         */\n        (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();\n    });\n    /**\n     * If this component is a child of AnimateSharedLayout, we need to snapshot the component\n     * before it's unmounted. This lives here rather than in features/layout/Measure because\n     * as a child component its unmount effect runs after this component has been unmounted.\n     */\n    useSnapshotOnUnmount(visualElement);\n    return visualElement;\n}\n\nexport { useVisualElement };\n"]},"metadata":{},"sourceType":"module"}