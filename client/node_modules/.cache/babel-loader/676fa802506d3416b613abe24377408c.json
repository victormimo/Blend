{"ast":null,"code":"'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\n\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\n\nvar DefaultRoomV2 = require('./room');\n\nvar DefaultTransport = require('./twilioconnectiontransport');\n\nvar _require = require('../../util/twilio-video-errors'),\n    SignalingConnectionDisconnectedError = _require.SignalingConnectionDisconnectedError,\n    SignalingIncomingMessageInvalidError = _require.SignalingIncomingMessageInvalidError;\n\nvar _require2 = require('../../util'),\n    flatMap = _require2.flatMap,\n    createRoomConnectEventPayload = _require2.createRoomConnectEventPayload;\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n  var _options = options,\n      PeerConnectionManager = _options.PeerConnectionManager,\n      RoomV2 = _options.RoomV2,\n      Transport = _options.Transport,\n      iceServers = _options.iceServers,\n      log = _options.log;\n  var peerConnectionManager = new PeerConnectionManager(encodingParameters, preferredCodecs, options);\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n  peerConnectionManager.setTrackSenders(trackSenders);\n  var cancellationError = new Error('Canceled');\n  var transport = void 0;\n  var cancelablePromise = new CancelablePromise(function (resolve, reject, isCanceled) {\n    var onIced = function onIced(iceServers) {\n      if (isCanceled()) {\n        reject(cancellationError);\n        return Promise.reject(cancellationError);\n      }\n\n      log.debug('Got ICE servers:', iceServers);\n      options.iceServers = iceServers;\n      peerConnectionManager.setConfiguration(options);\n      return peerConnectionManager.createAndOffer().then(function () {\n        if (isCanceled()) {\n          reject(cancellationError);\n          throw cancellationError;\n        }\n\n        log.debug('createAndOffer() succeeded.'); // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n        // initial offer in the event queue for the 'description' event. So,\n        // we are dequeueing to prevent the spurious 'update' message sent by\n        // the client after connecting to a room.\n\n        peerConnectionManager.dequeue('description');\n      }).catch(function (error) {\n        log.error('createAndOffer() failed:', error);\n        reject(error);\n        throw error;\n      });\n    };\n\n    var _options2 = options,\n        InsightsPublisher = _options2.InsightsPublisher,\n        NullInsightsPublisher = _options2.NullInsightsPublisher,\n        automaticSubscription = _options2.automaticSubscription,\n        bandwidthProfile = _options2.bandwidthProfile,\n        dominantSpeaker = _options2.dominantSpeaker,\n        environment = _options2.environment,\n        eventObserver = _options2.eventObserver,\n        loggerName = _options2.loggerName,\n        logLevel = _options2.logLevel,\n        name = _options2.name,\n        networkMonitor = _options2.networkMonitor,\n        networkQuality = _options2.networkQuality,\n        insights = _options2.insights,\n        realm = _options2.realm,\n        sdpSemantics = _options2.sdpSemantics,\n        wsServerInsights = _options2.wsServerInsights;\n    var transportOptions = Object.assign({\n      automaticSubscription: automaticSubscription,\n      dominantSpeaker: dominantSpeaker,\n      environment: environment,\n      eventObserver: eventObserver,\n      loggerName: loggerName,\n      logLevel: logLevel,\n      networkMonitor: networkMonitor,\n      networkQuality: networkQuality,\n      iceServers: iceServers,\n      insights: insights,\n      onIced: onIced,\n      realm: realm,\n      sdpSemantics: sdpSemantics\n    }, typeof wsServerInsights === 'string' ? {\n      wsServerInsights: wsServerInsights\n    } : {}, InsightsPublisher ? {\n      InsightsPublisher: InsightsPublisher\n    } : {}, NullInsightsPublisher ? {\n      NullInsightsPublisher: NullInsightsPublisher\n    } : {}, bandwidthProfile ? {\n      bandwidthProfile: bandwidthProfile\n    } : {});\n    transport = new Transport(name, token, localParticipant, peerConnectionManager, wsServer, transportOptions);\n    var connectEventPayload = createRoomConnectEventPayload(options);\n    eventObserver.emit('event', connectEventPayload);\n    transport.once('connected', function (initialState) {\n      log.debug('Transport connected:', initialState);\n\n      if (isCanceled()) {\n        reject(cancellationError);\n        return;\n      }\n\n      var localParticipantState = initialState.participant;\n\n      if (!localParticipantState) {\n        reject(new SignalingIncomingMessageInvalidError());\n        return;\n      }\n\n      var signalingRegion = initialState.options.signaling_region;\n      localParticipant.setSignalingRegion(signalingRegion);\n      resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n    });\n    transport.once('stateChanged', function (state, error) {\n      if (state === 'disconnected') {\n        transport = null;\n        reject(error || new SignalingConnectionDisconnectedError());\n      } else {\n        log.debug('Transport state changed:', state);\n      }\n    });\n  }, function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n  cancelablePromise.catch(function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n\n    peerConnectionManager.close();\n  });\n  return cancelablePromise;\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/twilio-video/es5/signaling/v2/cancelableroomsignalingpromise.js"],"names":["CancelablePromise","require","DefaultPeerConnectionManager","DefaultRoomV2","DefaultTransport","_require","SignalingConnectionDisconnectedError","SignalingIncomingMessageInvalidError","_require2","flatMap","createRoomConnectEventPayload","createCancelableRoomSignalingPromise","token","wsServer","localParticipant","encodingParameters","preferredCodecs","options","Object","assign","PeerConnectionManager","RoomV2","Transport","_options","iceServers","log","peerConnectionManager","trackSenders","tracks","trackV2","trackTransceiver","setTrackSenders","cancellationError","Error","transport","cancelablePromise","resolve","reject","isCanceled","onIced","Promise","debug","setConfiguration","createAndOffer","then","dequeue","catch","error","_options2","InsightsPublisher","NullInsightsPublisher","automaticSubscription","bandwidthProfile","dominantSpeaker","environment","eventObserver","loggerName","logLevel","name","networkMonitor","networkQuality","insights","realm","sdpSemantics","wsServerInsights","transportOptions","connectEventPayload","emit","once","initialState","localParticipantState","participant","signalingRegion","signaling_region","setSignalingRegion","state","disconnect","close","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar CancelablePromise = require('../../util/cancelablepromise');\nvar DefaultPeerConnectionManager = require('./peerconnectionmanager');\nvar DefaultRoomV2 = require('./room');\nvar DefaultTransport = require('./twilioconnectiontransport');\n\nvar _require = require('../../util/twilio-video-errors'),\n    SignalingConnectionDisconnectedError = _require.SignalingConnectionDisconnectedError,\n    SignalingIncomingMessageInvalidError = _require.SignalingIncomingMessageInvalidError;\n\nvar _require2 = require('../../util'),\n    flatMap = _require2.flatMap,\n    createRoomConnectEventPayload = _require2.createRoomConnectEventPayload;\n\nfunction createCancelableRoomSignalingPromise(token, wsServer, localParticipant, encodingParameters, preferredCodecs, options) {\n  options = Object.assign({\n    PeerConnectionManager: DefaultPeerConnectionManager,\n    RoomV2: DefaultRoomV2,\n    Transport: DefaultTransport\n  }, options);\n\n  var _options = options,\n      PeerConnectionManager = _options.PeerConnectionManager,\n      RoomV2 = _options.RoomV2,\n      Transport = _options.Transport,\n      iceServers = _options.iceServers,\n      log = _options.log;\n\n  var peerConnectionManager = new PeerConnectionManager(encodingParameters, preferredCodecs, options);\n  var trackSenders = flatMap(localParticipant.tracks, function (trackV2) {\n    return [trackV2.trackTransceiver];\n  });\n  peerConnectionManager.setTrackSenders(trackSenders);\n\n  var cancellationError = new Error('Canceled');\n\n  var transport = void 0;\n\n  var cancelablePromise = new CancelablePromise(function (resolve, reject, isCanceled) {\n    var onIced = function onIced(iceServers) {\n      if (isCanceled()) {\n        reject(cancellationError);\n        return Promise.reject(cancellationError);\n      }\n      log.debug('Got ICE servers:', iceServers);\n      options.iceServers = iceServers;\n      peerConnectionManager.setConfiguration(options);\n\n      return peerConnectionManager.createAndOffer().then(function () {\n        if (isCanceled()) {\n          reject(cancellationError);\n          throw cancellationError;\n        }\n        log.debug('createAndOffer() succeeded.');\n        // NOTE(mmalavalli): PeerConnectionManager#createAndOffer() queues the\n        // initial offer in the event queue for the 'description' event. So,\n        // we are dequeueing to prevent the spurious 'update' message sent by\n        // the client after connecting to a room.\n        peerConnectionManager.dequeue('description');\n      }).catch(function (error) {\n        log.error('createAndOffer() failed:', error);\n        reject(error);\n        throw error;\n      });\n    };\n\n    var _options2 = options,\n        InsightsPublisher = _options2.InsightsPublisher,\n        NullInsightsPublisher = _options2.NullInsightsPublisher,\n        automaticSubscription = _options2.automaticSubscription,\n        bandwidthProfile = _options2.bandwidthProfile,\n        dominantSpeaker = _options2.dominantSpeaker,\n        environment = _options2.environment,\n        eventObserver = _options2.eventObserver,\n        loggerName = _options2.loggerName,\n        logLevel = _options2.logLevel,\n        name = _options2.name,\n        networkMonitor = _options2.networkMonitor,\n        networkQuality = _options2.networkQuality,\n        insights = _options2.insights,\n        realm = _options2.realm,\n        sdpSemantics = _options2.sdpSemantics,\n        wsServerInsights = _options2.wsServerInsights;\n\n\n    var transportOptions = Object.assign({\n      automaticSubscription: automaticSubscription,\n      dominantSpeaker: dominantSpeaker,\n      environment: environment,\n      eventObserver: eventObserver,\n      loggerName: loggerName,\n      logLevel: logLevel,\n      networkMonitor: networkMonitor,\n      networkQuality: networkQuality,\n      iceServers: iceServers,\n      insights: insights,\n      onIced: onIced,\n      realm: realm,\n      sdpSemantics: sdpSemantics\n    }, typeof wsServerInsights === 'string' ? {\n      wsServerInsights: wsServerInsights\n    } : {}, InsightsPublisher ? {\n      InsightsPublisher: InsightsPublisher\n    } : {}, NullInsightsPublisher ? {\n      NullInsightsPublisher: NullInsightsPublisher\n    } : {}, bandwidthProfile ? {\n      bandwidthProfile: bandwidthProfile\n    } : {});\n\n    transport = new Transport(name, token, localParticipant, peerConnectionManager, wsServer, transportOptions);\n\n    var connectEventPayload = createRoomConnectEventPayload(options);\n    eventObserver.emit('event', connectEventPayload);\n\n    transport.once('connected', function (initialState) {\n      log.debug('Transport connected:', initialState);\n      if (isCanceled()) {\n        reject(cancellationError);\n        return;\n      }\n      var localParticipantState = initialState.participant;\n\n      if (!localParticipantState) {\n        reject(new SignalingIncomingMessageInvalidError());\n        return;\n      }\n\n      var signalingRegion = initialState.options.signaling_region;\n\n      localParticipant.setSignalingRegion(signalingRegion);\n      resolve(new RoomV2(localParticipant, initialState, transport, peerConnectionManager, options));\n    });\n\n    transport.once('stateChanged', function (state, error) {\n      if (state === 'disconnected') {\n        transport = null;\n        reject(error || new SignalingConnectionDisconnectedError());\n      } else {\n        log.debug('Transport state changed:', state);\n      }\n    });\n  }, function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n  });\n\n  cancelablePromise.catch(function () {\n    if (transport) {\n      transport.disconnect();\n      transport = null;\n    }\n    peerConnectionManager.close();\n  });\n\n  return cancelablePromise;\n}\n\nmodule.exports = createCancelableRoomSignalingPromise;"]},"metadata":{},"sourceType":"script"}