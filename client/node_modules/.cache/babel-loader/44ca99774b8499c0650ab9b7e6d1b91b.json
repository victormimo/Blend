{"ast":null,"code":"'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\n\nvar buildLogLevels = require('./util').buildLogLevels;\n\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar _require = require('./media/track/es5'),\n    LocalAudioTrack = _require.LocalAudioTrack,\n    LocalDataTrack = _require.LocalDataTrack,\n    LocalVideoTrack = _require.LocalVideoTrack;\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\n\nvar Log = require('./util/log');\n\nvar _require2 = require('./util/constants'),\n    DEFAULT_LOG_LEVEL = _require2.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = _require2.DEFAULT_LOGGER_NAME;\n\nvar workaround180748 = require('./webaudio/workaround180748'); // This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\n\n\nvar createLocalTrackCalls = 0;\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\n\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels, options.loggerName); // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n\n  var localTrackOptions = Object.assign({\n    log: log\n  }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var extraLocalTrackOptions = {\n    audio: options.audio && options.audio.name ? {\n      name: options.audio.name\n    } : {},\n    video: options.video && options.video.name ? {\n      name: options.video.name\n    } : {}\n  };\n  extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n  extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n\n  if (options.audio && typeof options.audio.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = options.audio.workaroundWebKitBug1208516;\n  }\n\n  if (options.video && typeof options.video.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.video.workaroundWebKitBug1208516 = options.video.workaroundWebKitBug1208516;\n  }\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(extraLocalTrackOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\n\nmodule.exports = createLocalTracks;","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/twilio-video/es5/createlocaltracks.js"],"names":["asLocalTrack","require","buildLogLevels","getUserMedia","_require","LocalAudioTrack","LocalDataTrack","LocalVideoTrack","MediaStreamTrack","Log","_require2","DEFAULT_LOG_LEVEL","DEFAULT_LOGGER_NAME","workaround180748","createLocalTrackCalls","createLocalTracks","options","isAudioVideoAbsent","Object","assign","audio","loggerName","logLevel","video","logComponentName","logLevels","log","localTrackOptions","name","info","Promise","resolve","tracks","debug","extraLocalTrackOptions","isCreatedByCreateLocalTracks","workaroundWebKitBug1208516","mediaStreamConstraints","workaroundWebKitBug180748","mediaStreamPromise","then","mediaStream","mediaStreamTracks","getAudioTracks","concat","getVideoTracks","map","mediaStreamTrack","kind","error","warn","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar asLocalTrack = require('./util').asLocalTrack;\nvar buildLogLevels = require('./util').buildLogLevels;\nvar getUserMedia = require('@twilio/webrtc').getUserMedia;\n\nvar _require = require('./media/track/es5'),\n    LocalAudioTrack = _require.LocalAudioTrack,\n    LocalDataTrack = _require.LocalDataTrack,\n    LocalVideoTrack = _require.LocalVideoTrack;\n\nvar MediaStreamTrack = require('@twilio/webrtc').MediaStreamTrack;\nvar Log = require('./util/log');\n\nvar _require2 = require('./util/constants'),\n    DEFAULT_LOG_LEVEL = _require2.DEFAULT_LOG_LEVEL,\n    DEFAULT_LOGGER_NAME = _require2.DEFAULT_LOGGER_NAME;\n\nvar workaround180748 = require('./webaudio/workaround180748');\n\n// This is used to make out which createLocalTracks() call a particular Log\n// statement belongs to. Each call to createLocalTracks() increments this\n// counter.\nvar createLocalTrackCalls = 0;\n\n/**\n * Request {@link LocalTrack}s. By default, it requests a\n * {@link LocalAudioTrack} and a {@link LocalVideoTrack}.\n * Note that on mobile browsers, the camera can be reserved by only one {@link LocalVideoTrack}\n * at any given time. If you attempt to create a second {@link LocalVideoTrack}, video frames\n * will no longer be supplied to the first {@link LocalVideoTrack}.\n * @alias module:twilio-video.createLocalTracks\n * @param {CreateLocalTracksOptions} [options]\n * @returns {Promise<Array<LocalTrack>>}\n * @example\n * var Video = require('twilio-video');\n * // Request audio and video tracks\n * Video.createLocalTracks().then(function(localTracks) {\n *   var localMediaContainer = document.getElementById('local-media-container-id');\n *   localTracks.forEach(function(track) {\n *     localMediaContainer.appendChild(track.attach());\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request just the default audio track\n * Video.createLocalTracks({ audio: true }).then(function(localTracks) {\n *   return Video.connect('my-token', {\n *     name: 'my-cool-room',\n *     tracks: localTracks\n *   });\n * });\n * @example\n * var Video = require('twilio-video');\n * // Request the audio and video tracks with custom names\n * Video.createLocalTracks({\n *   audio: { name: 'microphone' },\n *   video: { name: 'camera' }\n * }).then(function(localTracks) {\n *   localTracks.forEach(function(localTrack) {\n *     console.log(localTrack.name);\n *   });\n * });\n *\n * @example\n * var Video = require('twilio-video');\n * var localTracks;\n *\n * // Pre-acquire tracks to display camera preview.\n * Video.createLocalTracks().then(function(tracks) {\n *  localTracks = tracks;\n *  var localVideoTrack = localTracks.find(track => track.kind === 'video');\n *  divContainer.appendChild(localVideoTrack.attach());\n * })\n *\n * // Later, join the Room with the pre-acquired LocalTracks.\n * Video.connect('token', {\n *   name: 'my-cool-room',\n *   tracks: localTracks\n * });\n *\n */\nfunction createLocalTracks(options) {\n  var isAudioVideoAbsent = !(options && ('audio' in options || 'video' in options));\n\n  options = Object.assign({\n    audio: isAudioVideoAbsent,\n    getUserMedia: getUserMedia,\n    loggerName: DEFAULT_LOGGER_NAME,\n    logLevel: DEFAULT_LOG_LEVEL,\n    LocalAudioTrack: LocalAudioTrack,\n    LocalDataTrack: LocalDataTrack,\n    LocalVideoTrack: LocalVideoTrack,\n    MediaStreamTrack: MediaStreamTrack,\n    Log: Log,\n    video: isAudioVideoAbsent\n  }, options);\n\n  var logComponentName = '[createLocalTracks #' + ++createLocalTrackCalls + ']';\n  var logLevels = buildLogLevels(options.logLevel);\n  var log = new options.Log('default', logComponentName, logLevels, options.loggerName);\n\n  // NOTE(mmalavalli): The Room \"name\" in \"options\" was being used\n  // as the LocalTrack name in asLocalTrack(). So we pass a copy of\n  // \"options\" without the \"name\".\n  var localTrackOptions = Object.assign({ log: log }, options);\n  delete localTrackOptions.name;\n\n  if (options.audio === false && options.video === false) {\n    log.info('Neither audio nor video requested, so returning empty LocalTracks');\n    return Promise.resolve([]);\n  }\n\n  if (options.tracks) {\n    log.info('Adding user-provided LocalTracks');\n    log.debug('LocalTracks:', options.tracks);\n    return Promise.resolve(options.tracks);\n  }\n\n  var extraLocalTrackOptions = {\n    audio: options.audio && options.audio.name ? { name: options.audio.name } : {},\n    video: options.video && options.video.name ? { name: options.video.name } : {}\n  };\n\n  extraLocalTrackOptions.audio.isCreatedByCreateLocalTracks = true;\n  extraLocalTrackOptions.video.isCreatedByCreateLocalTracks = true;\n\n  if (options.audio && typeof options.audio.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.audio.workaroundWebKitBug1208516 = options.audio.workaroundWebKitBug1208516;\n  }\n\n  if (options.video && typeof options.video.workaroundWebKitBug1208516 === 'boolean') {\n    extraLocalTrackOptions.video.workaroundWebKitBug1208516 = options.video.workaroundWebKitBug1208516;\n  }\n\n  if (options.audio) {\n    delete options.audio.name;\n  }\n  if (options.video) {\n    delete options.video.name;\n  }\n\n  var mediaStreamConstraints = {\n    audio: options.audio,\n    video: options.video\n  };\n\n  var workaroundWebKitBug180748 = options.audio && options.audio.workaroundWebKitBug180748;\n\n  var mediaStreamPromise = workaroundWebKitBug180748 ? workaround180748(log, options.getUserMedia, mediaStreamConstraints) : options.getUserMedia(mediaStreamConstraints);\n\n  return mediaStreamPromise.then(function (mediaStream) {\n    var mediaStreamTracks = mediaStream.getAudioTracks().concat(mediaStream.getVideoTracks());\n\n    log.info('Call to getUserMedia successful; got MediaStreamTracks:', mediaStreamTracks);\n\n    return mediaStreamTracks.map(function (mediaStreamTrack) {\n      return asLocalTrack(mediaStreamTrack, Object.assign(extraLocalTrackOptions[mediaStreamTrack.kind], localTrackOptions));\n    });\n  }, function (error) {\n    log.warn('Call to getUserMedia failed:', error);\n    throw error;\n  });\n}\n\n/**\n * {@link createLocalTracks} options\n * @typedef {object} CreateLocalTracksOptions\n * @property {boolean|CreateLocalTrackOptions} [audio=true] - Whether or not to\n *   get local audio with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n * @property {LogLevel|LogLevels} [logLevel='warn'] - <code>(deprecated: use [Video.Logger](module-twilio-video.html) instead.\n *   See [examples](module-twilio-video.html#.connect) for details)</code>\n *   Set the default log verbosity\n *   of logging. Passing a {@link LogLevel} string will use the same\n *   level for all components. Pass a {@link LogLevels} to set specific log\n *   levels.\n * @property {string} [loggerName='twilio-video'] - The name of the logger. Use this name when accessing the logger used by the SDK.\n *   See [examples](module-twilio-video.html#.connect) for details.\n * @property {boolean|CreateLocalTrackOptions} [video=true] - Whether or not to\n *   get local video with <code>getUserMedia</code> when <code>tracks</code>\n *   are not provided.\n */\n\nmodule.exports = createLocalTracks;"]},"metadata":{},"sourceType":"script"}