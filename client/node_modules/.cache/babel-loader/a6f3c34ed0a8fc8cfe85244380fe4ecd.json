{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MediaTrack = require('./mediatrack');\n\nvar _require = require('../../util/constants'),\n    DEFAULT_FRAME_RATE = _require.DEFAULT_FRAME_RATE;\n/**\n * A {@link VideoTrack} is a {@link Track} representing video.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link VideoTrack} has\n *   started; if the {@link VideoTrack} started, there is enough video data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link VideoTrack} is\n *   enabled; if the {@link VideoTrack} is not enabled, it is \"paused\"\n * @property {VideoTrack.Dimensions} dimensions - The {@link VideoTrack}'s\n *   {@link VideoTrack.Dimensions}\n * @property {Track.Kind} kind - \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - A video MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed video frames.\n * It is null if no VideoProcessor has been added.\n * @property {?VideoProcessor} processor - A {@link VideoProcessor} that is currently\n *   processing video frames. It is null if video frames are not being processed.\n * @emits VideoTrack#dimensionsChanged\n * @emits VideoTrack#disabled\n * @emits VideoTrack#enabled\n * @emits VideoTrack#started\n */\n\n\nvar VideoTrack = function (_MediaTrack) {\n  _inherits(VideoTrack, _MediaTrack);\n  /**\n   * Construct a {@link VideoTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n\n\n  function VideoTrack(mediaTrackTransceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, VideoTrack);\n\n    var _this = _possibleConstructorReturn(this, (VideoTrack.__proto__ || Object.getPrototypeOf(VideoTrack)).call(this, mediaTrackTransceiver, options));\n\n    Object.defineProperties(_this, {\n      _captureTimeoutId: {\n        value: null,\n        writable: true\n      },\n      _isCapturing: {\n        value: false,\n        writable: true\n      },\n      _inputFrame: {\n        value: null,\n        writable: true\n      },\n      _outputFrame: {\n        value: null,\n        writable: true\n      },\n      _unmuteHandler: {\n        value: null,\n        writable: true\n      },\n      dimensions: {\n        enumerable: true,\n        value: {\n          width: null,\n          height: null\n        }\n      },\n      processor: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * @private\n   */\n\n\n  _createClass(VideoTrack, [{\n    key: '_canCaptureFrames',\n    value: function _canCaptureFrames() {\n      var isPublishing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var canCaptureFrames = true;\n      var _mediaStreamTrack = this.mediaStreamTrack,\n          enabled = _mediaStreamTrack.enabled,\n          readyState = _mediaStreamTrack.readyState;\n\n      if (!enabled) {\n        canCaptureFrames = false;\n\n        this._log.debug('MediaStreamTrack is disabled');\n      }\n\n      if (readyState === 'ended') {\n        canCaptureFrames = false;\n\n        this._log.debug('MediaStreamTrack is ended');\n      }\n\n      if (!this.processor) {\n        canCaptureFrames = false;\n\n        this._log.debug('VideoProcessor not detected.');\n      }\n\n      if (!this._attachments.size && !isPublishing) {\n        canCaptureFrames = false;\n\n        this._log.debug('VideoTrack is not publishing and there is no attached element.');\n      }\n\n      return canCaptureFrames;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_captureFrames',\n    value: function _captureFrames() {\n      var _this2 = this;\n\n      if (this._isCapturing) {\n        return this._log.debug('Ignoring captureFrames call. Capture is already in progress');\n      }\n\n      if (!this._canCaptureFrames()) {\n        this._isCapturing = false;\n        return this._log.debug('Cannot capture frames. Ignoring captureFrames call.');\n      }\n\n      this._isCapturing = true;\n\n      this._log.debug('Start capturing frames');\n\n      var startTime = Date.now();\n      var processFramePeriodMs = void 0;\n\n      this._dummyEl.play().then(function () {\n        var captureFrame = function captureFrame(cb) {\n          clearTimeout(_this2._captureTimeoutId);\n\n          var _mediaStreamTrack$get = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get2 = _mediaStreamTrack$get.frameRate,\n              frameRate = _mediaStreamTrack$get2 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get2;\n\n          var capturePeriodMs = Math.floor(1000 / frameRate);\n          var delay = capturePeriodMs - processFramePeriodMs;\n\n          if (delay < 0 || typeof processFramePeriodMs !== 'number') {\n            delay = 0;\n          }\n\n          _this2._captureTimeoutId = setTimeout(cb, delay);\n        };\n\n        var process = function process() {\n          if (!_this2._canCaptureFrames()) {\n            _this2._isCapturing = false;\n            return _this2._log.debug('Cannot capture frames. Stopping capturing frames.');\n          }\n\n          startTime = Date.now();\n\n          var _mediaStreamTrack$get3 = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get4 = _mediaStreamTrack$get3.width,\n              width = _mediaStreamTrack$get4 === undefined ? 0 : _mediaStreamTrack$get4,\n              _mediaStreamTrack$get5 = _mediaStreamTrack$get3.height,\n              height = _mediaStreamTrack$get5 === undefined ? 0 : _mediaStreamTrack$get5;\n\n          _this2._inputFrame.width = width;\n          _this2._inputFrame.height = height;\n\n          _this2._inputFrame.getContext('2d').drawImage(_this2._dummyEl, 0, 0, width, height);\n\n          var result = null;\n\n          try {\n            result = _this2.processor.processFrame(_this2._inputFrame);\n          } catch (ex) {\n            _this2._log.debug('Exception detected after calling processFrame.', ex);\n          }\n\n          (result instanceof Promise ? result : Promise.resolve(result)).then(function (outputFrame) {\n            if (outputFrame && _this2._outputFrame) {\n              _this2._outputFrame.width = width;\n              _this2._outputFrame.height = height;\n\n              _this2._outputFrame.getContext('2d').drawImage(outputFrame, 0, 0, width, height);\n\n              _this2.processedTrack.requestFrame();\n            }\n          }).finally(function () {\n            processFramePeriodMs = Date.now() - startTime;\n            captureFrame(process);\n          });\n        };\n\n        captureFrame(process);\n      }).catch(function (error) {\n        return _this2._log.error('Video element cannot be played', {\n          error: error,\n          track: _this2\n        });\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_initialize',\n    value: function _initialize() {\n      var _this3 = this;\n\n      _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_initialize', this).call(this);\n\n      if (this._dummyEl) {\n        this._dummyEl.onloadedmetadata = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n          }\n        };\n\n        this._dummyEl.onresize = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n\n            if (_this3.isStarted) {\n              _this3._log.debug('Dimensions changed:', _this3.dimensions);\n\n              _this3.emit(VideoTrack.DIMENSIONS_CHANGED, _this3);\n            }\n          }\n        };\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_restartProcessor',\n    value: function _restartProcessor() {\n      var processor = this.processor;\n\n      if (processor) {\n        this.removeProcessor(processor);\n        this.addProcessor(processor);\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_start',\n    value: function _start(dummyEl) {\n      this.dimensions.width = dummyEl.videoWidth;\n      this.dimensions.height = dummyEl.videoHeight;\n\n      this._log.debug('Dimensions:', this.dimensions);\n\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_start', this).call(this, dummyEl);\n    }\n    /**\n     * Add a {@link VideoProcessor} to allow for custom processing of video frames belonging to a VideoTrack.\n     * Only Chrome supports this as of now. Calling this API from a non-supported browser will result in a log warning.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to use.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.outputFrame = new OffscreenCanvas(0, 0);\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrame) {\n     *     this.outputFrame.width = inputFrame.width;\n     *     this.outputFrame.height = inputFrame.height;\n     *\n     *     const context = this.outputFrame.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrame, 0, 0, inputFrame.width, inputFrame.height);\n     *     return this.outputFrame;\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   videoTrack.addProcessor(new GrayScaleProcessor(100));\n     * });\n     */\n\n  }, {\n    key: 'addProcessor',\n    value: function addProcessor(processor) {\n      var _this4 = this;\n\n      if (typeof OffscreenCanvas !== 'function') {\n        return this._log.warn('Adding a VideoProcessor is not supported in this browser.');\n      }\n\n      if (!processor || typeof processor.processFrame !== 'function') {\n        throw new Error('Received an invalid VideoProcessor from addProcessor.');\n      }\n\n      if (this.processor) {\n        throw new Error('A VideoProcessor has already been added.');\n      }\n\n      if (!this._dummyEl) {\n        throw new Error('VideoTrack has not been initialized.');\n      }\n\n      this._log.debug('Adding VideoProcessor to the VideoTrack', processor);\n\n      if (!this._unmuteHandler) {\n        this._unmuteHandler = function () {\n          _this4._log.debug('mediaStreamTrack unmuted'); // NOTE(csantos): On certain scenarios where mediaStreamTrack is coming from muted to unmuted state,\n          // the processedTrack doesn't unmutes automatically although enabled is already set to true.\n          // This is a terminal state for the processedTrack and should be restarted. (VIDEO-4176)\n\n\n          if (_this4.processedTrack.muted) {\n            _this4._log.debug('mediaStreamTrack is unmuted but processedTrack is muted. Restarting processor.');\n\n            _this4._restartProcessor();\n          }\n        };\n\n        this.mediaStreamTrack.addEventListener('unmute', this._unmuteHandler);\n      }\n\n      var _mediaStreamTrack$get6 = this.mediaStreamTrack.getSettings(),\n          _mediaStreamTrack$get7 = _mediaStreamTrack$get6.width,\n          width = _mediaStreamTrack$get7 === undefined ? 0 : _mediaStreamTrack$get7,\n          _mediaStreamTrack$get8 = _mediaStreamTrack$get6.height,\n          height = _mediaStreamTrack$get8 === undefined ? 0 : _mediaStreamTrack$get8;\n\n      this._inputFrame = new OffscreenCanvas(width, height);\n      this._outputFrame = document.createElement('canvas');\n      this._outputFrame.width = width;\n      this._outputFrame.height = height;\n      this.processedTrack = this._outputFrame.captureStream(0).getTracks()[0];\n      this.processedTrack.enabled = this.mediaStreamTrack.enabled;\n      this.processor = processor;\n\n      this._updateElementsMediaStreamTrack();\n\n      this._captureFrames();\n\n      return this;\n    }\n    /**\n     * Create an HTMLVideoElement and attach the {@link VideoTrack} to it.\n     *\n     * The HTMLVideoElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link VideoTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLVideoElement} videoElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const videoElement = videoTrack.attach();\n     *   document.body.appendChild(videoElement);\n     * });\n    */\n\n    /**\n    * Attach the {@link VideoTrack} to an existing HTMLMediaElement. The\n    * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n    *\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n    * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n    * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\n    * them.\n    *\n    * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const Video = require('twilio-video');\n    *\n    * const videoElement = document.createElement('video');\n    * document.body.appendChild(videoElement);\n    *\n    * Video.createLocalVideoTrack().then(function(videoTrack) {\n    *   videoTrack.attach(videoElement);\n    * });\n    */\n\n    /**\n    * Attach the {@link VideoTrack} to an HTMLMediaElement selected by\n    * <code>document.querySelector</code>. The HTMLMediaElement could be an\n    * HTMLAudioElement or an HTMLVideoElement.\n    *\n    * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n    * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n    * MediaStreamTrack; otherwise, it adds the {@link VideoTrack}'s\n    * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n    * MediaStreamTracks of the same kind on the MediaStream, this method removes\n    * them.\n    *\n    * @param {string} selector - A query selector for the HTMLMediaElement to\n    *   attach to\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const Video = require('twilio-video');\n    *\n    * const videoElement = document.createElement('video');\n    * videoElement.id = 'my-video-element';\n    * document.body.appendChild(videoElement);\n    *\n    * Video.createLocalVideoTrack().then(function(track) {\n    *   track.attach('#my-video-element');\n    * });\n    */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      var result = _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'attach', this).apply(this, arguments);\n\n      if (this.processor) {\n        this._captureFrames();\n      }\n\n      return result;\n    }\n    /**\n     * Detach the {@link VideoTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = videoTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */\n\n    /**\n    * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement.\n    * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n    *   which the {@link VideoTrack} is attached\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * const videoElement = document.getElementById('my-video-element');\n    * videoTrack.detach(videoElement).remove();\n    */\n\n    /**\n    * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement\n    *   specified by <code>document.querySelector</code>.\n    * @param {string} selector - The query selector of HTMLMediaElement to which\n    *    the {@link VideoTrack} is attached\n    * @returns {HTMLMediaElement} mediaElement\n    * @example\n    * videoTrack.detach('#my-video-element').remove();\n    */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n    /**\n     * Remove the previously added {@link VideoProcessor} using `addProcessor` API.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to remove.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.outputFrame = new OffscreenCanvas(0, 0);\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrame) {\n     *     this.outputFrame.width = inputFrame.width;\n     *     this.outputFrame.height = inputFrame.height;\n     *\n     *     const context = this.outputFrame.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrame, 0, 0, inputFrame.width, inputFrame.height);\n     *     return this.outputFrame;\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const grayScaleProcessor = new GrayScaleProcessor(100);\n     *   videoTrack.addProcessor(grayScaleProcessor);\n     *   document.getElementById('remove-button').onclick = () => videoTrack.removeProcessor(grayScaleProcessor);\n     * });\n     */\n\n  }, {\n    key: 'removeProcessor',\n    value: function removeProcessor(processor) {\n      if (!processor) {\n        throw new Error('Received an invalid VideoProcessor from removeProcessor.');\n      }\n\n      if (!this.processor) {\n        throw new Error('No existing VideoProcessor detected.');\n      }\n\n      if (processor !== this.processor) {\n        throw new Error('The provided VideoProcessor is different than the existing one.');\n      }\n\n      this._log.debug('Removing VideoProcessor from the VideoTrack', processor);\n\n      clearTimeout(this._captureTimeoutId);\n      this.mediaStreamTrack.removeEventListener('unmute', this._unmuteHandler);\n      this._unmuteHandler = null;\n      this._isCapturing = false;\n      this.processor = null;\n      this.processedTrack = null;\n\n      this._inputFrame.getContext('2d').clearRect(0, 0, this._inputFrame.width, this._inputFrame.height);\n\n      this._outputFrame.getContext('2d').clearRect(0, 0, this._outputFrame.width, this._outputFrame.height);\n\n      this._inputFrame = null;\n      this._outputFrame = null;\n\n      this._updateElementsMediaStreamTrack();\n\n      return this;\n    }\n  }]);\n\n  return VideoTrack;\n}(MediaTrack);\n\nVideoTrack.DIMENSIONS_CHANGED = 'dimensionsChanged';\n\nfunction dimensionsChanged(track, elem) {\n  return track.dimensions.width !== elem.videoWidth || track.dimensions.height !== elem.videoHeight;\n}\n/**\n * A {@link VideoTrack}'s width and height.\n * @typedef {object} VideoTrack.Dimensions\n * @property {?number} width - The {@link VideoTrack}'s width or null if the\n *   {@link VideoTrack} has not yet started\n * @property {?number} height - The {@link VideoTrack}'s height or null if the\n *   {@link VideoTrack} has not yet started\n */\n\n/**\n * A {@link VideoProcessor} is used to process incoming video frames before\n * sending to the encoder or renderer.\n * @typedef {object} VideoProcessor\n * @property {function} processFrame - A callback to receive incoming video frames for processing.\n * Any exception raised (either synchronously or asynchronously) in `processFrame` will result in the frame being dropped.\n * Developers can drop the current frame by returning null.\n * This callback has the following signature:\n * <code>processFrame(inputFrame: OffscreenCanvas)</code><br/>\n * &nbsp;&nbsp;<code>: Promise<OffscreenCanvas | null></code><br/>\n * &nbsp;&nbsp;<code>| OffscreenCanvas | null;</code><br/>\n */\n\n/**\n * The {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event VideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link VideoTrack} was disabled, i.e. \"paused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was disabled\n * @event VideoTrack#disabled\n */\n\n/**\n * The {@link VideoTrack} was enabled, i.e. \"unpaused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was enabled\n * @event VideoTrack#enabled\n */\n\n/**\n * The {@link VideoTrack} started. This means there is enough video data to\n * begin playback.\n * @param {VideoTrack} track - The {@link VideoTrack} that started\n * @event VideoTrack#started\n */\n\n\nmodule.exports = VideoTrack;","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/twilio-video/es5/media/track/videotrack.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_get","get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","MediaTrack","require","_require","DEFAULT_FRAME_RATE","VideoTrack","_MediaTrack","mediaTrackTransceiver","options","_ret","_this","_captureTimeoutId","_isCapturing","_inputFrame","_outputFrame","_unmuteHandler","dimensions","width","height","processor","_canCaptureFrames","isPublishing","arguments","canCaptureFrames","_mediaStreamTrack","mediaStreamTrack","enabled","readyState","_log","debug","_attachments","size","_captureFrames","_this2","startTime","Date","now","processFramePeriodMs","_dummyEl","play","then","captureFrame","cb","clearTimeout","_mediaStreamTrack$get","getSettings","_mediaStreamTrack$get2","frameRate","capturePeriodMs","Math","floor","delay","setTimeout","process","_mediaStreamTrack$get3","_mediaStreamTrack$get4","_mediaStreamTrack$get5","getContext","drawImage","result","processFrame","ex","Promise","resolve","outputFrame","processedTrack","requestFrame","finally","catch","error","track","_initialize","_this3","onloadedmetadata","dimensionsChanged","videoWidth","videoHeight","onresize","isStarted","emit","DIMENSIONS_CHANGED","_restartProcessor","removeProcessor","addProcessor","_start","dummyEl","_this4","OffscreenCanvas","warn","Error","muted","addEventListener","_mediaStreamTrack$get6","_mediaStreamTrack$get7","_mediaStreamTrack$get8","document","createElement","captureStream","getTracks","_updateElementsMediaStreamTrack","attach","apply","detach","removeEventListener","clearRect","elem","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MediaTrack = require('./mediatrack');\n\nvar _require = require('../../util/constants'),\n    DEFAULT_FRAME_RATE = _require.DEFAULT_FRAME_RATE;\n\n/**\n * A {@link VideoTrack} is a {@link Track} representing video.\n * @extends Track\n * @property {boolean} isStarted - Whether or not the {@link VideoTrack} has\n *   started; if the {@link VideoTrack} started, there is enough video data to\n *   begin playback\n * @property {boolean} isEnabled - Whether or not the {@link VideoTrack} is\n *   enabled; if the {@link VideoTrack} is not enabled, it is \"paused\"\n * @property {VideoTrack.Dimensions} dimensions - The {@link VideoTrack}'s\n *   {@link VideoTrack.Dimensions}\n * @property {Track.Kind} kind - \"video\"\n * @property {MediaStreamTrack} mediaStreamTrack - A video MediaStreamTrack\n * @property {?MediaStreamTrack} processedTrack - The source of processed video frames.\n * It is null if no VideoProcessor has been added.\n * @property {?VideoProcessor} processor - A {@link VideoProcessor} that is currently\n *   processing video frames. It is null if video frames are not being processed.\n * @emits VideoTrack#dimensionsChanged\n * @emits VideoTrack#disabled\n * @emits VideoTrack#enabled\n * @emits VideoTrack#started\n */\n\n\nvar VideoTrack = function (_MediaTrack) {\n  _inherits(VideoTrack, _MediaTrack);\n\n  /**\n   * Construct a {@link VideoTrack}.\n   * @param {MediaTrackTransceiver} mediaTrackTransceiver\n   * @param {{log: Log}} options\n   */\n  function VideoTrack(mediaTrackTransceiver, options) {\n    var _ret;\n\n    _classCallCheck(this, VideoTrack);\n\n    var _this = _possibleConstructorReturn(this, (VideoTrack.__proto__ || Object.getPrototypeOf(VideoTrack)).call(this, mediaTrackTransceiver, options));\n\n    Object.defineProperties(_this, {\n      _captureTimeoutId: {\n        value: null,\n        writable: true\n      },\n      _isCapturing: {\n        value: false,\n        writable: true\n      },\n      _inputFrame: {\n        value: null,\n        writable: true\n      },\n      _outputFrame: {\n        value: null,\n        writable: true\n      },\n      _unmuteHandler: {\n        value: null,\n        writable: true\n      },\n      dimensions: {\n        enumerable: true,\n        value: {\n          width: null,\n          height: null\n        }\n      },\n      processor: {\n        enumerable: true,\n        value: null,\n        writable: true\n      }\n    });\n\n    return _ret = _this, _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * @private\n   */\n\n\n  _createClass(VideoTrack, [{\n    key: '_canCaptureFrames',\n    value: function _canCaptureFrames() {\n      var isPublishing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var canCaptureFrames = true;\n      var _mediaStreamTrack = this.mediaStreamTrack,\n          enabled = _mediaStreamTrack.enabled,\n          readyState = _mediaStreamTrack.readyState;\n\n      if (!enabled) {\n        canCaptureFrames = false;\n        this._log.debug('MediaStreamTrack is disabled');\n      }\n      if (readyState === 'ended') {\n        canCaptureFrames = false;\n        this._log.debug('MediaStreamTrack is ended');\n      }\n      if (!this.processor) {\n        canCaptureFrames = false;\n        this._log.debug('VideoProcessor not detected.');\n      }\n      if (!this._attachments.size && !isPublishing) {\n        canCaptureFrames = false;\n        this._log.debug('VideoTrack is not publishing and there is no attached element.');\n      }\n      return canCaptureFrames;\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_captureFrames',\n    value: function _captureFrames() {\n      var _this2 = this;\n\n      if (this._isCapturing) {\n        return this._log.debug('Ignoring captureFrames call. Capture is already in progress');\n      }\n      if (!this._canCaptureFrames()) {\n        this._isCapturing = false;\n        return this._log.debug('Cannot capture frames. Ignoring captureFrames call.');\n      }\n      this._isCapturing = true;\n      this._log.debug('Start capturing frames');\n\n      var startTime = Date.now();\n      var processFramePeriodMs = void 0;\n\n      this._dummyEl.play().then(function () {\n        var captureFrame = function captureFrame(cb) {\n          clearTimeout(_this2._captureTimeoutId);\n\n          var _mediaStreamTrack$get = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get2 = _mediaStreamTrack$get.frameRate,\n              frameRate = _mediaStreamTrack$get2 === undefined ? DEFAULT_FRAME_RATE : _mediaStreamTrack$get2;\n\n          var capturePeriodMs = Math.floor(1000 / frameRate);\n          var delay = capturePeriodMs - processFramePeriodMs;\n          if (delay < 0 || typeof processFramePeriodMs !== 'number') {\n            delay = 0;\n          }\n          _this2._captureTimeoutId = setTimeout(cb, delay);\n        };\n        var process = function process() {\n          if (!_this2._canCaptureFrames()) {\n            _this2._isCapturing = false;\n            return _this2._log.debug('Cannot capture frames. Stopping capturing frames.');\n          }\n          startTime = Date.now();\n\n          var _mediaStreamTrack$get3 = _this2.mediaStreamTrack.getSettings(),\n              _mediaStreamTrack$get4 = _mediaStreamTrack$get3.width,\n              width = _mediaStreamTrack$get4 === undefined ? 0 : _mediaStreamTrack$get4,\n              _mediaStreamTrack$get5 = _mediaStreamTrack$get3.height,\n              height = _mediaStreamTrack$get5 === undefined ? 0 : _mediaStreamTrack$get5;\n\n          _this2._inputFrame.width = width;\n          _this2._inputFrame.height = height;\n          _this2._inputFrame.getContext('2d').drawImage(_this2._dummyEl, 0, 0, width, height);\n\n          var result = null;\n          try {\n            result = _this2.processor.processFrame(_this2._inputFrame);\n          } catch (ex) {\n            _this2._log.debug('Exception detected after calling processFrame.', ex);\n          }\n          (result instanceof Promise ? result : Promise.resolve(result)).then(function (outputFrame) {\n            if (outputFrame && _this2._outputFrame) {\n              _this2._outputFrame.width = width;\n              _this2._outputFrame.height = height;\n              _this2._outputFrame.getContext('2d').drawImage(outputFrame, 0, 0, width, height);\n              _this2.processedTrack.requestFrame();\n            }\n          }).finally(function () {\n            processFramePeriodMs = Date.now() - startTime;\n            captureFrame(process);\n          });\n        };\n        captureFrame(process);\n      }).catch(function (error) {\n        return _this2._log.error('Video element cannot be played', { error: error, track: _this2 });\n      });\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_initialize',\n    value: function _initialize() {\n      var _this3 = this;\n\n      _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_initialize', this).call(this);\n      if (this._dummyEl) {\n        this._dummyEl.onloadedmetadata = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n          }\n        };\n        this._dummyEl.onresize = function () {\n          if (dimensionsChanged(_this3, _this3._dummyEl)) {\n            _this3.dimensions.width = _this3._dummyEl.videoWidth;\n            _this3.dimensions.height = _this3._dummyEl.videoHeight;\n            if (_this3.isStarted) {\n              _this3._log.debug('Dimensions changed:', _this3.dimensions);\n              _this3.emit(VideoTrack.DIMENSIONS_CHANGED, _this3);\n            }\n          }\n        };\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_restartProcessor',\n    value: function _restartProcessor() {\n      var processor = this.processor;\n      if (processor) {\n        this.removeProcessor(processor);\n        this.addProcessor(processor);\n      }\n    }\n\n    /**\n     * @private\n     */\n\n  }, {\n    key: '_start',\n    value: function _start(dummyEl) {\n      this.dimensions.width = dummyEl.videoWidth;\n      this.dimensions.height = dummyEl.videoHeight;\n\n      this._log.debug('Dimensions:', this.dimensions);\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), '_start', this).call(this, dummyEl);\n    }\n\n    /**\n     * Add a {@link VideoProcessor} to allow for custom processing of video frames belonging to a VideoTrack.\n     * Only Chrome supports this as of now. Calling this API from a non-supported browser will result in a log warning.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to use.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.outputFrame = new OffscreenCanvas(0, 0);\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrame) {\n     *     this.outputFrame.width = inputFrame.width;\n     *     this.outputFrame.height = inputFrame.height;\n     *\n     *     const context = this.outputFrame.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrame, 0, 0, inputFrame.width, inputFrame.height);\n     *     return this.outputFrame;\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   videoTrack.addProcessor(new GrayScaleProcessor(100));\n     * });\n     */\n\n  }, {\n    key: 'addProcessor',\n    value: function addProcessor(processor) {\n      var _this4 = this;\n\n      if (typeof OffscreenCanvas !== 'function') {\n        return this._log.warn('Adding a VideoProcessor is not supported in this browser.');\n      }\n      if (!processor || typeof processor.processFrame !== 'function') {\n        throw new Error('Received an invalid VideoProcessor from addProcessor.');\n      }\n      if (this.processor) {\n        throw new Error('A VideoProcessor has already been added.');\n      }\n      if (!this._dummyEl) {\n        throw new Error('VideoTrack has not been initialized.');\n      }\n      this._log.debug('Adding VideoProcessor to the VideoTrack', processor);\n\n      if (!this._unmuteHandler) {\n        this._unmuteHandler = function () {\n          _this4._log.debug('mediaStreamTrack unmuted');\n          // NOTE(csantos): On certain scenarios where mediaStreamTrack is coming from muted to unmuted state,\n          // the processedTrack doesn't unmutes automatically although enabled is already set to true.\n          // This is a terminal state for the processedTrack and should be restarted. (VIDEO-4176)\n          if (_this4.processedTrack.muted) {\n            _this4._log.debug('mediaStreamTrack is unmuted but processedTrack is muted. Restarting processor.');\n            _this4._restartProcessor();\n          }\n        };\n        this.mediaStreamTrack.addEventListener('unmute', this._unmuteHandler);\n      }\n\n      var _mediaStreamTrack$get6 = this.mediaStreamTrack.getSettings(),\n          _mediaStreamTrack$get7 = _mediaStreamTrack$get6.width,\n          width = _mediaStreamTrack$get7 === undefined ? 0 : _mediaStreamTrack$get7,\n          _mediaStreamTrack$get8 = _mediaStreamTrack$get6.height,\n          height = _mediaStreamTrack$get8 === undefined ? 0 : _mediaStreamTrack$get8;\n\n      this._inputFrame = new OffscreenCanvas(width, height);\n      this._outputFrame = document.createElement('canvas');\n      this._outputFrame.width = width;\n      this._outputFrame.height = height;\n\n      this.processedTrack = this._outputFrame.captureStream(0).getTracks()[0];\n      this.processedTrack.enabled = this.mediaStreamTrack.enabled;\n      this.processor = processor;\n\n      this._updateElementsMediaStreamTrack();\n      this._captureFrames();\n      return this;\n    }\n\n    /**\n     * Create an HTMLVideoElement and attach the {@link VideoTrack} to it.\n     *\n     * The HTMLVideoElement's <code>srcObject</code> will be set to a new\n     * MediaStream containing the {@link VideoTrack}'s MediaStreamTrack.\n     *\n     * @returns {HTMLVideoElement} videoElement\n     * @example\n     * const Video = require('twilio-video');\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const videoElement = videoTrack.attach();\n     *   document.body.appendChild(videoElement);\n     * });\n    */ /**\n       * Attach the {@link VideoTrack} to an existing HTMLMediaElement. The\n       * HTMLMediaElement could be an HTMLAudioElement or an HTMLVideoElement.\n       *\n       * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n       * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n       * MediaStreamTrack; otherwise, it adds the {@link MediaTrack}'s\n       * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n       * MediaStreamTracks of the same kind on the MediaStream, this method removes\n       * them.\n       *\n       * @param {HTMLMediaElement} mediaElement - The HTMLMediaElement to attach to\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const Video = require('twilio-video');\n       *\n       * const videoElement = document.createElement('video');\n       * document.body.appendChild(videoElement);\n       *\n       * Video.createLocalVideoTrack().then(function(videoTrack) {\n       *   videoTrack.attach(videoElement);\n       * });\n       */ /**\n          * Attach the {@link VideoTrack} to an HTMLMediaElement selected by\n          * <code>document.querySelector</code>. The HTMLMediaElement could be an\n          * HTMLAudioElement or an HTMLVideoElement.\n          *\n          * If the HTMLMediaElement's <code>srcObject</code> is not set to a MediaStream,\n          * this method sets it to a new MediaStream containing the {@link VideoTrack}'s\n          * MediaStreamTrack; otherwise, it adds the {@link VideoTrack}'s\n          * MediaStreamTrack to the existing MediaStream. Finally, if there are any other\n          * MediaStreamTracks of the same kind on the MediaStream, this method removes\n          * them.\n          *\n          * @param {string} selector - A query selector for the HTMLMediaElement to\n          *   attach to\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * const Video = require('twilio-video');\n          *\n          * const videoElement = document.createElement('video');\n          * videoElement.id = 'my-video-element';\n          * document.body.appendChild(videoElement);\n          *\n          * Video.createLocalVideoTrack().then(function(track) {\n          *   track.attach('#my-video-element');\n          * });\n          */\n\n  }, {\n    key: 'attach',\n    value: function attach() {\n      var result = _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'attach', this).apply(this, arguments);\n      if (this.processor) {\n        this._captureFrames();\n      }\n      return result;\n    }\n\n    /**\n     * Detach the {@link VideoTrack} from all previously attached HTMLMediaElements.\n     * @returns {Array<HTMLMediaElement>} mediaElements\n     * @example\n     * const mediaElements = videoTrack.detach();\n     * mediaElements.forEach(mediaElement => mediaElement.remove());\n    */ /**\n       * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement.\n       * @param {HTMLMediaElement} mediaElement - One of the HTMLMediaElements to\n       *   which the {@link VideoTrack} is attached\n       * @returns {HTMLMediaElement} mediaElement\n       * @example\n       * const videoElement = document.getElementById('my-video-element');\n       * videoTrack.detach(videoElement).remove();\n       */ /**\n          * Detach the {@link VideoTrack} from a previously attached HTMLMediaElement\n          *   specified by <code>document.querySelector</code>.\n          * @param {string} selector - The query selector of HTMLMediaElement to which\n          *    the {@link VideoTrack} is attached\n          * @returns {HTMLMediaElement} mediaElement\n          * @example\n          * videoTrack.detach('#my-video-element').remove();\n          */\n\n  }, {\n    key: 'detach',\n    value: function detach() {\n      return _get(VideoTrack.prototype.__proto__ || Object.getPrototypeOf(VideoTrack.prototype), 'detach', this).apply(this, arguments);\n    }\n\n    /**\n     * Remove the previously added {@link VideoProcessor} using `addProcessor` API.\n     * @param {VideoProcessor} processor - The {@link VideoProcessor} to remove.\n     * @returns {this}\n     * @example\n     * class GrayScaleProcessor {\n     *   constructor(percentage) {\n     *     this.outputFrame = new OffscreenCanvas(0, 0);\n     *     this.percentage = percentage;\n     *   }\n     *   processFrame(inputFrame) {\n     *     this.outputFrame.width = inputFrame.width;\n     *     this.outputFrame.height = inputFrame.height;\n     *\n     *     const context = this.outputFrame.getContext('2d');\n     *     context.filter = `grayscale(${this.percentage}%)`;\n     *     context.drawImage(inputFrame, 0, 0, inputFrame.width, inputFrame.height);\n     *     return this.outputFrame;\n     *   }\n     * }\n     *\n     * Video.createLocalVideoTrack().then(function(videoTrack) {\n     *   const grayScaleProcessor = new GrayScaleProcessor(100);\n     *   videoTrack.addProcessor(grayScaleProcessor);\n     *   document.getElementById('remove-button').onclick = () => videoTrack.removeProcessor(grayScaleProcessor);\n     * });\n     */\n\n  }, {\n    key: 'removeProcessor',\n    value: function removeProcessor(processor) {\n      if (!processor) {\n        throw new Error('Received an invalid VideoProcessor from removeProcessor.');\n      }\n      if (!this.processor) {\n        throw new Error('No existing VideoProcessor detected.');\n      }\n      if (processor !== this.processor) {\n        throw new Error('The provided VideoProcessor is different than the existing one.');\n      }\n      this._log.debug('Removing VideoProcessor from the VideoTrack', processor);\n      clearTimeout(this._captureTimeoutId);\n      this.mediaStreamTrack.removeEventListener('unmute', this._unmuteHandler);\n      this._unmuteHandler = null;\n      this._isCapturing = false;\n\n      this.processor = null;\n      this.processedTrack = null;\n      this._inputFrame.getContext('2d').clearRect(0, 0, this._inputFrame.width, this._inputFrame.height);\n      this._outputFrame.getContext('2d').clearRect(0, 0, this._outputFrame.width, this._outputFrame.height);\n      this._inputFrame = null;\n      this._outputFrame = null;\n\n      this._updateElementsMediaStreamTrack();\n      return this;\n    }\n  }]);\n\n  return VideoTrack;\n}(MediaTrack);\n\nVideoTrack.DIMENSIONS_CHANGED = 'dimensionsChanged';\n\nfunction dimensionsChanged(track, elem) {\n  return track.dimensions.width !== elem.videoWidth || track.dimensions.height !== elem.videoHeight;\n}\n\n/**\n * A {@link VideoTrack}'s width and height.\n * @typedef {object} VideoTrack.Dimensions\n * @property {?number} width - The {@link VideoTrack}'s width or null if the\n *   {@link VideoTrack} has not yet started\n * @property {?number} height - The {@link VideoTrack}'s height or null if the\n *   {@link VideoTrack} has not yet started\n */\n\n/**\n * A {@link VideoProcessor} is used to process incoming video frames before\n * sending to the encoder or renderer.\n * @typedef {object} VideoProcessor\n * @property {function} processFrame - A callback to receive incoming video frames for processing.\n * Any exception raised (either synchronously or asynchronously) in `processFrame` will result in the frame being dropped.\n * Developers can drop the current frame by returning null.\n * This callback has the following signature:\n * <code>processFrame(inputFrame: OffscreenCanvas)</code><br/>\n * &nbsp;&nbsp;<code>: Promise<OffscreenCanvas | null></code><br/>\n * &nbsp;&nbsp;<code>| OffscreenCanvas | null;</code><br/>\n */\n\n/**\n * The {@link VideoTrack}'s dimensions changed.\n * @param {VideoTrack} track - The {@link VideoTrack} whose dimensions changed\n * @event VideoTrack#dimensionsChanged\n */\n\n/**\n * The {@link VideoTrack} was disabled, i.e. \"paused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was disabled\n * @event VideoTrack#disabled\n */\n\n/**\n * The {@link VideoTrack} was enabled, i.e. \"unpaused\".\n * @param {VideoTrack} track - The {@link VideoTrack} that was enabled\n * @event VideoTrack#enabled\n */\n\n/**\n * The {@link VideoTrack} started. This means there is enough video data to\n * begin playback.\n * @param {VideoTrack} track - The {@link VideoTrack} that started\n * @event VideoTrack#started\n */\n\nmodule.exports = VideoTrack;"]},"metadata":{},"sourceType":"script"}