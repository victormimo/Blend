{"ast":null,"code":"import { __assign } from 'tslib';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.js';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.js';\nimport { useConstant } from '../../../utils/use-constant.js';\n\nfunction useInitialMotionValues(visualElement) {\n  var createStyle = function () {\n    var _a = visualElement.build(),\n        vars = _a.vars,\n        style = _a.style;\n\n    return __assign(__assign({}, vars), style);\n  };\n\n  return visualElement.isStatic ? createStyle() : useConstant(createStyle);\n}\n\nfunction useStyle(visualElement, props) {\n  var styleProp = props.style || {};\n  var style = {};\n  /**\n   * Copy non-Motion Values straight into style\n   */\n\n  for (var key in styleProp) {\n    // TODO We might want this to be a hasValue check? Although this could be impure\n    if (!isMotionValue(styleProp[key]) && !isForcedMotionValue(key, props)) {\n      style[key] = styleProp[key];\n    }\n  }\n\n  style = __assign(__assign({}, style), useInitialMotionValues(visualElement));\n\n  if (props.transformValues) {\n    style = props.transformValues(style);\n  }\n\n  return style;\n}\n\nfunction useHTMLProps(visualElement, props) {\n  // The `any` isn't ideal but it is the type of createElement props argument\n  var htmlProps = {};\n  var style = useStyle(visualElement, props);\n\n  if (Boolean(props.drag)) {\n    // Disable the ghost element when a user drags\n    htmlProps.draggable = false; // Disable text selection\n\n    style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = \"none\"; // Disable scrolling on the draggable direction\n\n    style.touchAction = props.drag === true ? \"none\" : \"pan-\" + (props.drag === \"x\" ? \"y\" : \"x\");\n  }\n\n  htmlProps.style = style;\n  return htmlProps;\n}\n\nexport { useHTMLProps, useStyle };","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/framer-motion/dist/es/render/dom/utils/use-html-props.js"],"names":["__assign","isMotionValue","isForcedMotionValue","useConstant","useInitialMotionValues","visualElement","createStyle","_a","build","vars","style","isStatic","useStyle","props","styleProp","key","transformValues","useHTMLProps","htmlProps","Boolean","drag","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,mBAAT,QAAoC,iDAApC;AACA,SAASC,WAAT,QAA4B,gCAA5B;;AAEA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+C;AAC3C,MAAIC,WAAW,GAAG,YAAY;AAC1B,QAAIC,EAAE,GAAGF,aAAa,CAACG,KAAd,EAAT;AAAA,QAAgCC,IAAI,GAAGF,EAAE,CAACE,IAA1C;AAAA,QAAgDC,KAAK,GAAGH,EAAE,CAACG,KAA3D;;AACA,WAAOV,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKS,IAAL,CAAT,EAAqBC,KAArB,CAAf;AACH,GAHD;;AAIA,SAAOL,aAAa,CAACM,QAAd,GAAyBL,WAAW,EAApC,GAAyCH,WAAW,CAACG,WAAD,CAA3D;AACH;;AACD,SAASM,QAAT,CAAkBP,aAAlB,EAAiCQ,KAAjC,EAAwC;AACpC,MAAIC,SAAS,GAAGD,KAAK,CAACH,KAAN,IAAe,EAA/B;AACA,MAAIA,KAAK,GAAG,EAAZ;AACA;AACJ;AACA;;AACI,OAAK,IAAIK,GAAT,IAAgBD,SAAhB,EAA2B;AACvB;AACA,QAAI,CAACb,aAAa,CAACa,SAAS,CAACC,GAAD,CAAV,CAAd,IACA,CAACb,mBAAmB,CAACa,GAAD,EAAMF,KAAN,CADxB,EACsC;AAClCH,MAAAA,KAAK,CAACK,GAAD,CAAL,GAAaD,SAAS,CAACC,GAAD,CAAtB;AACH;AACJ;;AACDL,EAAAA,KAAK,GAAGV,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKU,KAAL,CAAT,EAAsBN,sBAAsB,CAACC,aAAD,CAA5C,CAAhB;;AACA,MAAIQ,KAAK,CAACG,eAAV,EAA2B;AACvBN,IAAAA,KAAK,GAAGG,KAAK,CAACG,eAAN,CAAsBN,KAAtB,CAAR;AACH;;AACD,SAAOA,KAAP;AACH;;AACD,SAASO,YAAT,CAAsBZ,aAAtB,EAAqCQ,KAArC,EAA4C;AACxC;AACA,MAAIK,SAAS,GAAG,EAAhB;AACA,MAAIR,KAAK,GAAGE,QAAQ,CAACP,aAAD,EAAgBQ,KAAhB,CAApB;;AACA,MAAIM,OAAO,CAACN,KAAK,CAACO,IAAP,CAAX,EAAyB;AACrB;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsB,KAAtB,CAFqB,CAGrB;;AACAX,IAAAA,KAAK,CAACY,UAAN,GAAmBZ,KAAK,CAACa,gBAAN,GAAyBb,KAAK,CAACc,kBAAN,GACxC,MADJ,CAJqB,CAMrB;;AACAd,IAAAA,KAAK,CAACe,WAAN,GACIZ,KAAK,CAACO,IAAN,KAAe,IAAf,GACM,MADN,GAEM,UAAUP,KAAK,CAACO,IAAN,KAAe,GAAf,GAAqB,GAArB,GAA2B,GAArC,CAHV;AAIH;;AACDF,EAAAA,SAAS,CAACR,KAAV,GAAkBA,KAAlB;AACA,SAAOQ,SAAP;AACH;;AAED,SAASD,YAAT,EAAuBL,QAAvB","sourcesContent":["import { __assign } from 'tslib';\nimport { isMotionValue } from '../../../value/utils/is-motion-value.js';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.js';\nimport { useConstant } from '../../../utils/use-constant.js';\n\nfunction useInitialMotionValues(visualElement) {\n    var createStyle = function () {\n        var _a = visualElement.build(), vars = _a.vars, style = _a.style;\n        return __assign(__assign({}, vars), style);\n    };\n    return visualElement.isStatic ? createStyle() : useConstant(createStyle);\n}\nfunction useStyle(visualElement, props) {\n    var styleProp = props.style || {};\n    var style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    for (var key in styleProp) {\n        // TODO We might want this to be a hasValue check? Although this could be impure\n        if (!isMotionValue(styleProp[key]) &&\n            !isForcedMotionValue(key, props)) {\n            style[key] = styleProp[key];\n        }\n    }\n    style = __assign(__assign({}, style), useInitialMotionValues(visualElement));\n    if (props.transformValues) {\n        style = props.transformValues(style);\n    }\n    return style;\n}\nfunction useHTMLProps(visualElement, props) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    var htmlProps = {};\n    var style = useStyle(visualElement, props);\n    if (Boolean(props.drag)) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout =\n            \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : \"pan-\" + (props.drag === \"x\" ? \"y\" : \"x\");\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { useHTMLProps, useStyle };\n"]},"metadata":{},"sourceType":"module"}