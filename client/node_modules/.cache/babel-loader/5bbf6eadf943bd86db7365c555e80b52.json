{"ast":null,"code":"import { __assign, __spread } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { copyAxisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { isRefObject } from '../utils/is-ref-object.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { checkIfControllingVariants, isVariantLabel } from './utils/variants.js';\nimport { createVisualState, createLayoutState, createProjectionState } from './utils/state.js';\nimport { buildLayoutProjectionTransform } from './dom/utils/build-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\n\nvar visualElement = function (_a) {\n  var _b = _a.treeType,\n      treeType = _b === void 0 ? \"\" : _b,\n      createRenderState = _a.createRenderState,\n      build = _a.build,\n      getBaseTarget = _a.getBaseTarget,\n      makeTargetAnimatable = _a.makeTargetAnimatable,\n      measureViewportBox = _a.measureViewportBox,\n      onMount = _a.onMount,\n      renderInstance = _a.render,\n      readValueFromInstance = _a.readValueFromInstance,\n      resetTransform = _a.resetTransform,\n      restoreTransform = _a.restoreTransform,\n      removeValueFromMutableState = _a.removeValueFromMutableState,\n      sortNodePosition = _a.sortNodePosition,\n      scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n  return function (_a, options) {\n    var parent = _a.parent,\n        externalRef = _a.ref,\n        props = _a.props,\n        isStatic = _a.isStatic,\n        presenceId = _a.presenceId,\n        blockInitialAnimation = _a.blockInitialAnimation;\n\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n\n    var instance;\n    /**\n     * A set of all children of this visual element. We use this to traverse\n     * the tree when updating layout projections.\n     */\n\n    var children = new Set();\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender and onViewportBoxUpdate.\n     */\n\n    var lifecycles = createLifecycles();\n    /**\n     *\n     */\n\n    var projection = createProjectionState();\n    /**\n     * The latest resolved motion values.\n     */\n\n    var latestValues = createVisualState(props, parent, blockInitialAnimation);\n    /**\n     * This is a reference to the visual state of the \"lead\" visual element.\n     * Usually, this will be this visual element. But if it shares a layoutId\n     * with other visual elements, only one of them will be designated lead by\n     * AnimateSharedLayout. All the other visual elements will take on the visual\n     * appearance of the lead while they crossfade to it.\n     */\n\n    var leadProjection = projection;\n    var leadLatestValues = latestValues;\n    var unsubscribeFromLeadVisualElement;\n    /**\n     * The latest layout measurements and calculated projections. This\n     * is seperate from the target projection data in visualState as\n     * many visual elements might point to the same piece of visualState as\n     * a target, whereas they might each have different layouts and thus\n     * projection calculations needed to project into the same viewport box.\n     */\n\n    var layoutState = createLayoutState();\n    /**\n     * Each visual element creates a pool of renderer-specific mutable state\n     * which allows renderer-specific calculations to occur while reducing GC.\n     */\n\n    var renderState = createRenderState();\n    /**\n     *\n     */\n\n    var crossfader;\n    /**\n     * Keep track of whether the viewport box has been updated since the\n     * last time the layout projection was re-calculated.\n     */\n\n    var hasViewportBoxUpdated = false;\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    var prevMotionValues = {};\n    /**\n     * x/y motion values that track the progress of initiated layout\n     * animations.\n     *\n     * TODO: Target for removal\n     */\n\n    var projectionTargetProgress;\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    var baseTarget = __assign({}, latestValues); // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n\n    var removeFromMotionTree;\n    var removeFromVariantTree;\n    /**\n     *\n     */\n\n    function mount() {\n      element.pointTo(element);\n      removeFromMotionTree = parent === null || parent === void 0 ? void 0 : parent.addChild(element);\n\n      if (isVariantNode && parent && !isControllingVariants) {\n        removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n      }\n\n      onMount === null || onMount === void 0 ? void 0 : onMount(element, instance, renderState);\n    }\n    /**\n     *\n     */\n\n\n    function unmount() {\n      cancelSync.update(update);\n      cancelSync.render(render);\n      cancelSync.preRender(element.updateLayoutProjection);\n      valueSubscriptions.forEach(function (remove) {\n        return remove();\n      });\n      element.stopLayoutAnimation();\n      removeFromMotionTree === null || removeFromMotionTree === void 0 ? void 0 : removeFromMotionTree();\n      removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n      unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n      lifecycles.clearAllListeners();\n    }\n    /**\n     *\n     */\n\n\n    function isProjecting() {\n      return projection.isEnabled && layoutState.isHydrated;\n    }\n    /**\n     *\n     */\n\n\n    function render() {\n      if (!instance) return;\n\n      if (isProjecting()) {\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n        applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n\n        updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n      }\n\n      triggerBuild();\n      renderInstance(instance, renderState);\n    }\n\n    function triggerBuild() {\n      var valuesToRender = latestValues;\n\n      if (crossfader && crossfader.isActive()) {\n        var crossfadedValues = crossfader.getCrossfadeState(element);\n        if (crossfadedValues) valuesToRender = crossfadedValues;\n      }\n\n      build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n\n    function updateLayoutProjection() {\n      var delta = layoutState.delta,\n          treeScale = layoutState.treeScale;\n      var prevTreeScaleX = treeScale.x;\n      var prevTreeScaleY = treeScale.x;\n      var prevDeltaTransform = layoutState.deltaTransform;\n      updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n      hasViewportBoxUpdated && element.notifyViewportBoxUpdate(leadProjection.target, delta);\n      hasViewportBoxUpdated = false;\n      var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n\n      if (deltaTransform !== prevDeltaTransform || // Also compare calculated treeScale, for values that rely on this only for scale correction\n      prevTreeScaleX !== treeScale.x || prevTreeScaleY !== treeScale.y) {\n        element.scheduleRender();\n      }\n\n      layoutState.deltaTransform = deltaTransform;\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    var initialMotionValues = scrapeMotionValuesFromProps(props);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    var isControllingVariants = checkIfControllingVariants(props);\n    var definesInitialVariant = isVariantLabel(props.initial);\n    var isVariantNode = Boolean(definesInitialVariant || isControllingVariants || props.variants);\n\n    var element = __assign(__assign({\n      treeType: treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n\n      /**\n       * An ancestor path back to the root visual element. This is used\n       * by layout projection to quickly recurse back up the tree.\n       */\n      path: parent ? __spread(parent.path, [parent]) : [],\n\n      /**\n       *\n       */\n      presenceId: presenceId,\n      projection: projection,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by AnimateSharedLayout, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\n       * If a visual element is static, it's essentially in \"pure\" mode with\n       * no additional functionality like animations or gestures loaded in.\n       * This can be considered Framer canvas mode.\n       */\n      isStatic: isStatic,\n\n      /**\n       * A boolean that can be used to determine whether to respect hover events.\n       * For layout measurements we often have to reposition the instance by\n       * removing its transform. This can trigger hover events, which is\n       * undesired.\n       */\n      isHoverEventsEnabled: true,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function () {\n        return Boolean(instance);\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addChild: function (child) {\n        children.add(child);\n        return function () {\n          return children.delete(child);\n        };\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild: function (child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function (other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function () {\n        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\n       * A method that schedules an update to layout projections throughout\n       * the tree. We inherit from the parent so there's only ever one\n       * job scheduled on the next frame - that of the root visual element.\n       */\n      scheduleUpdateLayoutProjection: parent ? parent.scheduleUpdateLayoutProjection : function () {\n        return sync.preRender(element.updateLayoutProjection, false, true);\n      },\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function () {\n        return props.layoutId;\n      },\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function () {\n        return instance;\n      },\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function (key) {\n        return latestValues[key];\n      },\n      setStaticValue: function (key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function () {\n        return latestValues;\n      },\n\n      /**\n       * Replaces the current mutable states with fresh ones. This is used\n       * in static mode where rather than creating a new visual element every\n       * render we can just make fresh state.\n       */\n      clearState: function (newProps) {\n        values.clear();\n        props = newProps;\n        leadLatestValues = latestValues = createVisualState(props, parent, blockInitialAnimation);\n        renderState = createRenderState();\n      },\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility: function (visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable: function (target, canMutate) {\n        if (canMutate === void 0) {\n          canMutate = true;\n        }\n\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Temporarily suspend hover events while we remove transforms in order to measure the layout.\n       *\n       * This seems like an odd bit of scheduling but what we're doing is saying after\n       * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\n       * the next frame results in missed, valid hover events. But triggering on the postRender\n       * frame is too soon to avoid triggering events with layout measurements.\n       *\n       * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\n       */\n      suspendHoverEvents: function () {\n        element.isHoverEventsEnabled = false;\n        sync.postRender(function () {\n          return setTimeout(function () {\n            return element.isHoverEventsEnabled = true;\n          }, 10);\n        });\n      },\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function (key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue: function (key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromMutableState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function (key) {\n        return values.has(key);\n      },\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue: function (key, defaultValue) {\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function (callback) {\n        return values.forEach(callback);\n      },\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function (key) {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget: function (key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget: function (key) {\n        if (getBaseTarget) {\n          var target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\n       * A ref function to be provided to the mounting React component.\n       * This is used to hydrated the instance and run mount/unmount lifecycles.\n       */\n      ref: function (mountingElement) {\n        instance = element.current = mountingElement;\n        mountingElement ? mount() : unmount();\n        if (!externalRef) return;\n\n        if (typeof externalRef === \"function\") {\n          externalRef(mountingElement);\n        } else if (isRefObject(externalRef)) {\n          externalRef.current = mountingElement;\n        }\n      },\n\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build: function () {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender: function () {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps: function (newProps) {\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function () {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function (name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function () {\n        return props.transition;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext: function (startAtParent) {\n        if (startAtParent === void 0) {\n          startAtParent = false;\n        }\n\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context_1.initial = props.initial;\n          }\n\n          return context_1;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name_1 = variantProps[i];\n          var prop = props[name_1];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name_1] = prop;\n          }\n        }\n\n        return context;\n      },\n      // Layout projection ==============================\n\n      /**\n       * Enable layout projection for this visual element. Won't actually\n       * occur until we also have hydrated layout measurements.\n       */\n      enableLayoutProjection: function () {\n        projection.isEnabled = true;\n      },\n\n      /**\n       * Lock the projection target, for instance when dragging, so\n       * nothing else can try and animate it.\n       */\n      lockProjectionTarget: function () {\n        projection.isTargetLocked = true;\n      },\n      unlockProjectionTarget: function () {\n        element.stopLayoutAnimation();\n        projection.isTargetLocked = false;\n      },\n\n      /**\n       * Record the viewport box as it was before an expected mutation/re-render\n       */\n      snapshotViewportBox: function () {\n        // TODO: Store this snapshot in LayoutState\n        element.prevViewportBox = element.measureViewportBox(false);\n        /**\n         * Update targetBox to match the prevViewportBox. This is just to ensure\n         * that targetBox is affected by scroll in the same way as the measured box\n         */\n\n        element.rebaseProjectionTarget(false, element.prevViewportBox);\n      },\n      getLayoutState: function () {\n        return layoutState;\n      },\n      setCrossfader: function (newCrossfader) {\n        crossfader = newCrossfader;\n      },\n\n      /**\n       * Start a layout animation on a given axis.\n       * TODO: This could be better.\n       */\n      startLayoutAnimation: function (axis, transition) {\n        var progress = element.getProjectionAnimationProgress()[axis];\n        var _a = projection.target[axis],\n            min = _a.min,\n            max = _a.max;\n        var length = max - min;\n        progress.clearListeners();\n        progress.set(min);\n        progress.set(min); // Set twice to hard-reset velocity\n\n        progress.onChange(function (v) {\n          return element.setProjectionTargetAxis(axis, v, v + length);\n        });\n        return element.animateMotionValue(axis, progress, 0, transition);\n      },\n\n      /**\n       * Stop layout animations.\n       */\n      stopLayoutAnimation: function () {\n        eachAxis(function (axis) {\n          return element.getProjectionAnimationProgress()[axis].stop();\n        });\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox: function (withTransform) {\n        if (withTransform === void 0) {\n          withTransform = true;\n        }\n\n        var viewportBox = measureViewportBox(instance, options);\n        if (!withTransform) removeBoxTransforms(viewportBox, latestValues);\n        return viewportBox;\n      },\n\n      /**\n       * Update the layoutState by measuring the DOM layout. This\n       * should be called after resetting any layout-affecting transforms.\n       */\n      updateLayoutMeasurement: function () {\n        element.notifyBeforeLayoutMeasure(layoutState.layout);\n        layoutState.isHydrated = true;\n        layoutState.layout = element.measureViewportBox();\n        layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\n        element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\n        sync.update(function () {\n          return element.rebaseProjectionTarget();\n        });\n      },\n\n      /**\n       * Get the motion values tracking the layout animations on each\n       * axis. Lazy init if not already created.\n       */\n      getProjectionAnimationProgress: function () {\n        projectionTargetProgress || (projectionTargetProgress = {\n          x: motionValue(0),\n          y: motionValue(0)\n        });\n        return projectionTargetProgress;\n      },\n\n      /**\n       * Update the projection of a single axis. Schedule an update to\n       * the tree layout projection.\n       */\n      setProjectionTargetAxis: function (axis, min, max) {\n        var target = projection.target[axis];\n        target.min = min;\n        target.max = max; // Flag that we want to fire the onViewportBoxUpdate event handler\n\n        hasViewportBoxUpdated = true;\n        lifecycles.notifySetAxisTarget();\n      },\n\n      /**\n       * Rebase the projection target on top of the provided viewport box\n       * or the measured layout. This ensures that non-animating elements\n       * don't fall out of sync differences in measurements vs projections\n       * after a page scroll or other relayout.\n       */\n      rebaseProjectionTarget: function (force, box) {\n        if (box === void 0) {\n          box = layoutState.layout;\n        }\n\n        var _a = element.getProjectionAnimationProgress(),\n            x = _a.x,\n            y = _a.y;\n\n        var shouldRebase = !projection.isTargetLocked && !x.isAnimating() && !y.isAnimating();\n\n        if (force || shouldRebase) {\n          eachAxis(function (axis) {\n            var _a = box[axis],\n                min = _a.min,\n                max = _a.max;\n            element.setProjectionTargetAxis(axis, min, max);\n          });\n        }\n      },\n\n      /**\n       * Notify the visual element that its layout is up-to-date.\n       * Currently Animate.tsx uses this to check whether a layout animation\n       * needs to be performed.\n       */\n      notifyLayoutReady: function (config) {\n        element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n      },\n\n      /**\n       * Temporarily reset the transform of the instance.\n       */\n      resetTransform: function () {\n        return resetTransform(element, instance, props);\n      },\n\n      /**\n       * Perform the callback after temporarily unapplying the transform\n       * upwards through the tree.\n       */\n      withoutTransform: function (callback) {\n        var isEnabled = projection.isEnabled;\n        isEnabled && element.resetTransform();\n        parent ? parent.withoutTransform(callback) : callback();\n        isEnabled && restoreTransform(instance, renderState);\n      },\n      updateLayoutProjection: function () {\n        isProjecting() && updateLayoutProjection();\n        children.forEach(fireUpdateLayoutProjection);\n      },\n\n      /**\n       *\n       */\n      pointTo: function (newLead) {\n        leadProjection = newLead.projection;\n        leadLatestValues = newLead.getLatestValues();\n        /**\n         * Subscribe to lead component's layout animations\n         */\n\n        unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n        unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n          var _a;\n\n          if (element.isPresent) {\n            element.presence = Presence.Present;\n          } else {\n            (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n          }\n        }));\n      },\n      // TODO: Clean this up\n      isPresent: true,\n      presence: Presence.Entering\n    });\n\n    return element;\n  };\n};\n\nfunction fireUpdateLayoutProjection(child) {\n  child.updateLayoutProjection();\n}\n\nvar variantProps = __spread([\"initial\"], variantPriorityOrder);\n\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/framer-motion/dist/es/render/index.js"],"names":["__assign","__spread","sync","cancelSync","pipe","Presence","eachAxis","copyAxisBox","removeBoxTransforms","applyBoxTransforms","updateBoxDelta","isRefObject","motionValue","isMotionValue","checkIfControllingVariants","isVariantLabel","createVisualState","createLayoutState","createProjectionState","buildLayoutProjectionTransform","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","updateLayoutDeltas","visualElement","_a","_b","treeType","createRenderState","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","onMount","renderInstance","render","readValueFromInstance","resetTransform","restoreTransform","removeValueFromMutableState","sortNodePosition","scrapeMotionValuesFromProps","options","parent","externalRef","ref","props","isStatic","presenceId","blockInitialAnimation","instance","children","Set","lifecycles","projection","latestValues","leadProjection","leadLatestValues","unsubscribeFromLeadVisualElement","layoutState","renderState","crossfader","hasViewportBoxUpdated","values","Map","valueSubscriptions","prevMotionValues","projectionTargetProgress","baseTarget","removeFromMotionTree","removeFromVariantTree","mount","element","pointTo","addChild","isVariantNode","isControllingVariants","addVariantChild","unmount","update","preRender","updateLayoutProjection","forEach","remove","stopLayoutAnimation","clearAllListeners","isProjecting","isEnabled","isHydrated","targetFinal","target","deltaFinal","layoutCorrected","triggerBuild","valuesToRender","isActive","crossfadedValues","getCrossfadeState","notifyUpdate","delta","treeScale","prevTreeScaleX","x","prevTreeScaleY","prevDeltaTransform","deltaTransform","path","notifyViewportBoxUpdate","y","scheduleRender","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","set","initialMotionValues","undefined","definesInitialVariant","initial","Boolean","variants","current","depth","variantChildren","isVisible","manuallyAnimateOnMount","isMounted","isHoverEventsEnabled","child","add","delete","closestVariantNode","getClosestVariantNode","other","getInstance","scheduleUpdateLayoutProjection","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","clearState","newProps","clear","setVisibility","visibility","canMutate","suspendHoverEvents","postRender","setTimeout","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","mountingElement","syncRender","setProps","updatePropListeners","getProps","getVariant","name","getDefaultTransition","transition","getVariantContext","startAtParent","context_1","context","i","numVariantProps","name_1","variantProps","prop","enableLayoutProjection","lockProjectionTarget","isTargetLocked","unlockProjectionTarget","snapshotViewportBox","prevViewportBox","rebaseProjectionTarget","getLayoutState","setCrossfader","newCrossfader","startLayoutAnimation","axis","progress","getProjectionAnimationProgress","min","max","length","clearListeners","v","setProjectionTargetAxis","animateMotionValue","stop","withTransform","viewportBox","updateLayoutMeasurement","notifyBeforeLayoutMeasure","layout","notifyLayoutMeasure","notifySetAxisTarget","force","box","shouldRebase","isAnimating","notifyLayoutReady","config","notifyLayoutUpdate","withoutTransform","fireUpdateLayoutProjection","newLead","onSetAxisTarget","onLayoutAnimationComplete","isPresent","presence","Present","layoutSafeToRemove","call","Entering"],"mappings":"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","sourcesContent":["import { __assign, __spread } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { pipe } from 'popmotion';\nimport { Presence } from '../components/AnimateSharedLayout/types.js';\nimport { eachAxis } from '../utils/each-axis.js';\nimport { copyAxisBox } from '../utils/geometry/index.js';\nimport { removeBoxTransforms, applyBoxTransforms } from '../utils/geometry/delta-apply.js';\nimport { updateBoxDelta } from '../utils/geometry/delta-calc.js';\nimport { isRefObject } from '../utils/is-ref-object.js';\nimport { motionValue } from '../value/index.js';\nimport { isMotionValue } from '../value/utils/is-motion-value.js';\nimport { checkIfControllingVariants, isVariantLabel } from './utils/variants.js';\nimport { createVisualState, createLayoutState, createProjectionState } from './utils/state.js';\nimport { buildLayoutProjectionTransform } from './dom/utils/build-transform.js';\nimport { variantPriorityOrder } from './utils/animation-state.js';\nimport { createLifecycles } from './utils/lifecycles.js';\nimport { updateMotionValuesFromProps } from './utils/motion-values.js';\nimport { updateLayoutDeltas } from './utils/projection.js';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, createRenderState = _a.createRenderState, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, onMount = _a.onMount, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, resetTransform = _a.resetTransform, restoreTransform = _a.restoreTransform, removeValueFromMutableState = _a.removeValueFromMutableState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, externalRef = _a.ref, props = _a.props, isStatic = _a.isStatic, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation;\n        if (options === void 0) { options = {}; }\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * A set of all children of this visual element. We use this to traverse\n         * the tree when updating layout projections.\n         */\n        var children = new Set();\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender and onViewportBoxUpdate.\n         */\n        var lifecycles = createLifecycles();\n        /**\n         *\n         */\n        var projection = createProjectionState();\n        /**\n         * The latest resolved motion values.\n         */\n        var latestValues = createVisualState(props, parent, blockInitialAnimation);\n        /**\n         * This is a reference to the visual state of the \"lead\" visual element.\n         * Usually, this will be this visual element. But if it shares a layoutId\n         * with other visual elements, only one of them will be designated lead by\n         * AnimateSharedLayout. All the other visual elements will take on the visual\n         * appearance of the lead while they crossfade to it.\n         */\n        var leadProjection = projection;\n        var leadLatestValues = latestValues;\n        var unsubscribeFromLeadVisualElement;\n        /**\n         * The latest layout measurements and calculated projections. This\n         * is seperate from the target projection data in visualState as\n         * many visual elements might point to the same piece of visualState as\n         * a target, whereas they might each have different layouts and thus\n         * projection calculations needed to project into the same viewport box.\n         */\n        var layoutState = createLayoutState();\n        /**\n         * Each visual element creates a pool of renderer-specific mutable state\n         * which allows renderer-specific calculations to occur while reducing GC.\n         */\n        var renderState = createRenderState();\n        /**\n         *\n         */\n        var crossfader;\n        /**\n         * Keep track of whether the viewport box has been updated since the\n         * last time the layout projection was re-calculated.\n         */\n        var hasViewportBoxUpdated = false;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * x/y motion values that track the progress of initiated layout\n         * animations.\n         *\n         * TODO: Target for removal\n         */\n        var projectionTargetProgress;\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromMotionTree;\n        var removeFromVariantTree;\n        /**\n         *\n         */\n        function mount() {\n            element.pointTo(element);\n            removeFromMotionTree = parent === null || parent === void 0 ? void 0 : parent.addChild(element);\n            if (isVariantNode && parent && !isControllingVariants) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            onMount === null || onMount === void 0 ? void 0 : onMount(element, instance, renderState);\n        }\n        /**\n         *\n         */\n        function unmount() {\n            cancelSync.update(update);\n            cancelSync.render(render);\n            cancelSync.preRender(element.updateLayoutProjection);\n            valueSubscriptions.forEach(function (remove) { return remove(); });\n            element.stopLayoutAnimation();\n            removeFromMotionTree === null || removeFromMotionTree === void 0 ? void 0 : removeFromMotionTree();\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n            lifecycles.clearAllListeners();\n        }\n        /**\n         *\n         */\n        function isProjecting() {\n            return projection.isEnabled && layoutState.isHydrated;\n        }\n        /**\n         *\n         */\n        function render() {\n            if (!instance)\n                return;\n            if (isProjecting()) {\n                /**\n                 * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n                 * This is the final box that we will then project into by calculating a transform delta and\n                 * applying it to the corrected box.\n                 */\n                applyBoxTransforms(leadProjection.targetFinal, leadProjection.target, leadLatestValues);\n                /**\n                 * Update the delta between the corrected box and the final target box, after\n                 * user-set transforms are applied to it. This will be used by the renderer to\n                 * create a transform style that will reproject the element from its actual layout\n                 * into the desired bounding box.\n                 */\n                updateBoxDelta(layoutState.deltaFinal, layoutState.layoutCorrected, leadProjection.targetFinal, latestValues);\n            }\n            triggerBuild();\n            renderInstance(instance, renderState);\n        }\n        function triggerBuild() {\n            var valuesToRender = latestValues;\n            if (crossfader && crossfader.isActive()) {\n                var crossfadedValues = crossfader.getCrossfadeState(element);\n                if (crossfadedValues)\n                    valuesToRender = crossfadedValues;\n            }\n            build(element, renderState, valuesToRender, leadProjection, layoutState, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        function updateLayoutProjection() {\n            var delta = layoutState.delta, treeScale = layoutState.treeScale;\n            var prevTreeScaleX = treeScale.x;\n            var prevTreeScaleY = treeScale.x;\n            var prevDeltaTransform = layoutState.deltaTransform;\n            updateLayoutDeltas(layoutState, leadProjection, element.path, latestValues);\n            hasViewportBoxUpdated &&\n                element.notifyViewportBoxUpdate(leadProjection.target, delta);\n            hasViewportBoxUpdated = false;\n            var deltaTransform = buildLayoutProjectionTransform(delta, treeScale);\n            if (deltaTransform !== prevDeltaTransform ||\n                // Also compare calculated treeScale, for values that rely on this only for scale correction\n                prevTreeScaleX !== treeScale.x ||\n                prevTreeScaleY !== treeScale.y) {\n                element.scheduleRender();\n            }\n            layoutState.deltaTransform = deltaTransform;\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var definesInitialVariant = isVariantLabel(props.initial);\n        var isVariantNode = Boolean(definesInitialVariant || isControllingVariants || props.variants);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, \n            /**\n             * An ancestor path back to the root visual element. This is used\n             * by layout projection to quickly recurse back up the tree.\n             */\n            path: parent ? __spread(parent.path, [parent]) : [], \n            /**\n             *\n             */\n            presenceId: presenceId,\n            projection: projection, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by AnimateSharedLayout, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation,\n            /**\n             * If a visual element is static, it's essentially in \"pure\" mode with\n             * no additional functionality like animations or gestures loaded in.\n             * This can be considered Framer canvas mode.\n             */\n            isStatic: isStatic, \n            /**\n             * A boolean that can be used to determine whether to respect hover events.\n             * For layout measurements we often have to reposition the instance by\n             * removing its transform. This can trigger hover events, which is\n             * undesired.\n             */\n            isHoverEventsEnabled: true, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, \n            /**\n             * Add a child visual element to our set of children.\n             */\n            addChild: function (child) {\n                children.add(child);\n                return function () { return children.delete(child); };\n            },\n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () { return closestVariantNode.variantChildren.delete(child); };\n                }\n            },\n            sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * A method that schedules an update to layout projections throughout\n             * the tree. We inherit from the parent so there's only ever one\n             * job scheduled on the next frame - that of the root visual element.\n             */\n            scheduleUpdateLayoutProjection: parent\n                ? parent.scheduleUpdateLayoutProjection\n                : function () { return sync.preRender(element.updateLayoutProjection, false, true); }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Replaces the current mutable states with fresh ones. This is used\n             * in static mode where rather than creating a new visual element every\n             * render we can just make fresh state.\n             */\n            clearState: function (newProps) {\n                values.clear();\n                props = newProps;\n                leadLatestValues = latestValues = createVisualState(props, parent, blockInitialAnimation);\n                renderState = createRenderState();\n            },\n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            },\n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            },\n            /**\n             * Temporarily suspend hover events while we remove transforms in order to measure the layout.\n             *\n             * This seems like an odd bit of scheduling but what we're doing is saying after\n             * the next render, wait 10 milliseconds before reenabling hover events. Waiting until\n             * the next frame results in missed, valid hover events. But triggering on the postRender\n             * frame is too soon to avoid triggering events with layout measurements.\n             *\n             * Note: If we figure out a way of measuring layout while transforms remain applied, this can be removed.\n             */\n            suspendHoverEvents: function () {\n                element.isHoverEventsEnabled = false;\n                sync.postRender(function () {\n                    return setTimeout(function () { return (element.isHoverEventsEnabled = true); }, 10);\n                });\n            },\n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            },\n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromMutableState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) { var _a; return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options); }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            },\n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * A ref function to be provided to the mounting React component.\n             * This is used to hydrated the instance and run mount/unmount lifecycles.\n             */\n            ref: function (mountingElement) {\n                instance = element.current = mountingElement;\n                mountingElement ? mount() : unmount();\n                if (!externalRef)\n                    return;\n                if (typeof externalRef === \"function\") {\n                    externalRef(mountingElement);\n                }\n                else if (isRefObject(externalRef)) {\n                    externalRef.current = mountingElement;\n                }\n            },\n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            },\n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            },\n            // Layout projection ==============================\n            /**\n             * Enable layout projection for this visual element. Won't actually\n             * occur until we also have hydrated layout measurements.\n             */\n            enableLayoutProjection: function () {\n                projection.isEnabled = true;\n            },\n            /**\n             * Lock the projection target, for instance when dragging, so\n             * nothing else can try and animate it.\n             */\n            lockProjectionTarget: function () {\n                projection.isTargetLocked = true;\n            },\n            unlockProjectionTarget: function () {\n                element.stopLayoutAnimation();\n                projection.isTargetLocked = false;\n            },\n            /**\n             * Record the viewport box as it was before an expected mutation/re-render\n             */\n            snapshotViewportBox: function () {\n                // TODO: Store this snapshot in LayoutState\n                element.prevViewportBox = element.measureViewportBox(false);\n                /**\n                 * Update targetBox to match the prevViewportBox. This is just to ensure\n                 * that targetBox is affected by scroll in the same way as the measured box\n                 */\n                element.rebaseProjectionTarget(false, element.prevViewportBox);\n            }, getLayoutState: function () { return layoutState; }, setCrossfader: function (newCrossfader) {\n                crossfader = newCrossfader;\n            },\n            /**\n             * Start a layout animation on a given axis.\n             * TODO: This could be better.\n             */\n            startLayoutAnimation: function (axis, transition) {\n                var progress = element.getProjectionAnimationProgress()[axis];\n                var _a = projection.target[axis], min = _a.min, max = _a.max;\n                var length = max - min;\n                progress.clearListeners();\n                progress.set(min);\n                progress.set(min); // Set twice to hard-reset velocity\n                progress.onChange(function (v) {\n                    return element.setProjectionTargetAxis(axis, v, v + length);\n                });\n                return element.animateMotionValue(axis, progress, 0, transition);\n            },\n            /**\n             * Stop layout animations.\n             */\n            stopLayoutAnimation: function () {\n                eachAxis(function (axis) {\n                    return element.getProjectionAnimationProgress()[axis].stop();\n                });\n            },\n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function (withTransform) {\n                if (withTransform === void 0) { withTransform = true; }\n                var viewportBox = measureViewportBox(instance, options);\n                if (!withTransform)\n                    removeBoxTransforms(viewportBox, latestValues);\n                return viewportBox;\n            },\n            /**\n             * Update the layoutState by measuring the DOM layout. This\n             * should be called after resetting any layout-affecting transforms.\n             */\n            updateLayoutMeasurement: function () {\n                element.notifyBeforeLayoutMeasure(layoutState.layout);\n                layoutState.isHydrated = true;\n                layoutState.layout = element.measureViewportBox();\n                layoutState.layoutCorrected = copyAxisBox(layoutState.layout);\n                element.notifyLayoutMeasure(layoutState.layout, element.prevViewportBox || layoutState.layout);\n                sync.update(function () { return element.rebaseProjectionTarget(); });\n            },\n            /**\n             * Get the motion values tracking the layout animations on each\n             * axis. Lazy init if not already created.\n             */\n            getProjectionAnimationProgress: function () {\n                projectionTargetProgress || (projectionTargetProgress = {\n                    x: motionValue(0),\n                    y: motionValue(0),\n                });\n                return projectionTargetProgress;\n            },\n            /**\n             * Update the projection of a single axis. Schedule an update to\n             * the tree layout projection.\n             */\n            setProjectionTargetAxis: function (axis, min, max) {\n                var target = projection.target[axis];\n                target.min = min;\n                target.max = max;\n                // Flag that we want to fire the onViewportBoxUpdate event handler\n                hasViewportBoxUpdated = true;\n                lifecycles.notifySetAxisTarget();\n            },\n            /**\n             * Rebase the projection target on top of the provided viewport box\n             * or the measured layout. This ensures that non-animating elements\n             * don't fall out of sync differences in measurements vs projections\n             * after a page scroll or other relayout.\n             */\n            rebaseProjectionTarget: function (force, box) {\n                if (box === void 0) { box = layoutState.layout; }\n                var _a = element.getProjectionAnimationProgress(), x = _a.x, y = _a.y;\n                var shouldRebase = !projection.isTargetLocked &&\n                    !x.isAnimating() &&\n                    !y.isAnimating();\n                if (force || shouldRebase) {\n                    eachAxis(function (axis) {\n                        var _a = box[axis], min = _a.min, max = _a.max;\n                        element.setProjectionTargetAxis(axis, min, max);\n                    });\n                }\n            },\n            /**\n             * Notify the visual element that its layout is up-to-date.\n             * Currently Animate.tsx uses this to check whether a layout animation\n             * needs to be performed.\n             */\n            notifyLayoutReady: function (config) {\n                element.notifyLayoutUpdate(layoutState.layout, element.prevViewportBox || layoutState.layout, config);\n            }, \n            /**\n             * Temporarily reset the transform of the instance.\n             */\n            resetTransform: function () { return resetTransform(element, instance, props); }, \n            /**\n             * Perform the callback after temporarily unapplying the transform\n             * upwards through the tree.\n             */\n            withoutTransform: function (callback) {\n                var isEnabled = projection.isEnabled;\n                isEnabled && element.resetTransform();\n                parent ? parent.withoutTransform(callback) : callback();\n                isEnabled && restoreTransform(instance, renderState);\n            },\n            updateLayoutProjection: function () {\n                isProjecting() && updateLayoutProjection();\n                children.forEach(fireUpdateLayoutProjection);\n            },\n            /**\n             *\n             */\n            pointTo: function (newLead) {\n                leadProjection = newLead.projection;\n                leadLatestValues = newLead.getLatestValues();\n                /**\n                 * Subscribe to lead component's layout animations\n                 */\n                unsubscribeFromLeadVisualElement === null || unsubscribeFromLeadVisualElement === void 0 ? void 0 : unsubscribeFromLeadVisualElement();\n                unsubscribeFromLeadVisualElement = pipe(newLead.onSetAxisTarget(element.scheduleUpdateLayoutProjection), newLead.onLayoutAnimationComplete(function () {\n                    var _a;\n                    if (element.isPresent) {\n                        element.presence = Presence.Present;\n                    }\n                    else {\n                        (_a = element.layoutSafeToRemove) === null || _a === void 0 ? void 0 : _a.call(element);\n                    }\n                }));\n            }, \n            // TODO: Clean this up\n            isPresent: true, presence: Presence.Entering });\n        return element;\n    };\n};\nfunction fireUpdateLayoutProjection(child) {\n    child.updateLayoutProjection();\n}\nvar variantProps = __spread([\"initial\"], variantPriorityOrder);\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n"]},"metadata":{},"sourceType":"module"}