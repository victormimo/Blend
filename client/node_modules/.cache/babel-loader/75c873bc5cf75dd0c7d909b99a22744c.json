{"ast":null,"code":"\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\n\n\nvar noop = function noop() {};\n\nvar undefinedType = \"undefined\";\nvar isIE = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType && _typeof(window.navigator) !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"]; // Cross-browser bind equivalent that works at least back to IE6\n\nfunction bindMethod(obj, methodName) {\n  var method = obj[methodName];\n\n  if (typeof method.bind === 'function') {\n    return method.bind(obj);\n  } else {\n    try {\n      return Function.prototype.bind.call(method, obj);\n    } catch (e) {\n      // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n      return function () {\n        return Function.prototype.apply.apply(method, [obj, arguments]);\n      };\n    }\n  }\n} // Trace() doesn't print the message in IE, so for that case we need to wrap it\n\n\nfunction traceForIE() {\n  if (console.log) {\n    if (console.log.apply) {\n      console.log.apply(console, arguments);\n    } else {\n      // In old IE, native console methods themselves don't have apply().\n      Function.prototype.apply.apply(console.log, [console, arguments]);\n    }\n  }\n\n  if (console.trace) console.trace();\n} // Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\n\n\nfunction realMethod(methodName) {\n  if (methodName === 'debug') {\n    methodName = 'log';\n  }\n\n  if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === undefinedType) {\n    return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n  } else if (methodName === 'trace' && isIE) {\n    return traceForIE;\n  } else if (console[methodName] !== undefined) {\n    return bindMethod(console, methodName);\n  } else if (console.log !== undefined) {\n    return bindMethod(console, 'log');\n  } else {\n    return noop;\n  }\n} // These private functions always need `this` to be set properly\n\n\nfunction replaceLoggingMethods(level, loggerName) {\n  /*jshint validthis:true */\n  for (var i = 0; i < logMethods.length; i++) {\n    var methodName = logMethods[i];\n    this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n  } // Define log.log as an alias for log.debug\n\n\n  this.log = this.debug;\n} // In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\n\n\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n  return function () {\n    if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) !== undefinedType) {\n      replaceLoggingMethods.call(this, level, loggerName);\n      this[methodName].apply(this, arguments);\n    }\n  };\n} // By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\n\n\nfunction defaultMethodFactory(methodName, level, loggerName) {\n  /*jshint validthis:true */\n  return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n  var self = this;\n  var currentLevel;\n  var storageKey = \"loglevel\";\n\n  if (typeof name === \"string\") {\n    storageKey += \":\" + name;\n  } else if ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) === \"symbol\") {\n    storageKey = undefined;\n  }\n\n  function persistLevelIfPossible(levelNum) {\n    var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n    if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === undefinedType || !storageKey) return; // Use localStorage if available\n\n    try {\n      window.localStorage[storageKey] = levelName;\n      return;\n    } catch (ignore) {} // Use session cookie as fallback\n\n\n    try {\n      window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n    } catch (ignore) {}\n  }\n\n  function getPersistedLevel() {\n    var storedLevel;\n    if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === undefinedType || !storageKey) return;\n\n    try {\n      storedLevel = window.localStorage[storageKey];\n    } catch (ignore) {} // Fallback to cookies if local storage gives us nothing\n\n\n    if ((typeof storedLevel === \"undefined\" ? \"undefined\" : _typeof(storedLevel)) === undefinedType) {\n      try {\n        var cookie = window.document.cookie;\n        var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n\n        if (location !== -1) {\n          storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n        }\n      } catch (ignore) {}\n    } // If the stored level is not valid, treat it as if nothing was stored.\n\n\n    if (self.levels[storedLevel] === undefined) {\n      storedLevel = undefined;\n    }\n\n    return storedLevel;\n  }\n  /*\n   *\n   * Public logger API - see https://github.com/pimterry/loglevel for details\n   *\n   */\n\n\n  self.name = name;\n  self.levels = {\n    \"TRACE\": 0,\n    \"DEBUG\": 1,\n    \"INFO\": 2,\n    \"WARN\": 3,\n    \"ERROR\": 4,\n    \"SILENT\": 5\n  };\n  self.methodFactory = factory || defaultMethodFactory;\n\n  self.getLevel = function () {\n    return currentLevel;\n  };\n\n  self.setLevel = function (level, persist) {\n    if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n      level = self.levels[level.toUpperCase()];\n    }\n\n    if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n      currentLevel = level;\n\n      if (persist !== false) {\n        // defaults to true\n        persistLevelIfPossible(level);\n      }\n\n      replaceLoggingMethods.call(self, level, name);\n\n      if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === undefinedType && level < self.levels.SILENT) {\n        return \"No console available for logging\";\n      }\n    } else {\n      throw \"log.setLevel() called with invalid level: \" + level;\n    }\n  };\n\n  self.setDefaultLevel = function (level) {\n    if (!getPersistedLevel()) {\n      self.setLevel(level, false);\n    }\n  };\n\n  self.enableAll = function (persist) {\n    self.setLevel(self.levels.TRACE, persist);\n  };\n\n  self.disableAll = function (persist) {\n    self.setLevel(self.levels.SILENT, persist);\n  }; // Initialize with the right level\n\n\n  var initialLevel = getPersistedLevel();\n\n  if (initialLevel == null) {\n    initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n  }\n\n  self.setLevel(initialLevel, false);\n}\n/*\n *\n * Top-level API\n *\n */\n\n\nvar defaultLogger = new Logger();\nvar _loggersByName = {};\n\ndefaultLogger.getLogger = function getLogger(name) {\n  if ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n    throw new TypeError(\"You must supply a name when creating a logger.\");\n  }\n\n  var logger = _loggersByName[name];\n\n  if (!logger) {\n    logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n  }\n\n  return logger;\n}; // Grab the current global log variable in case of overwrite\n\n\nvar _log = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType ? window.log : undefined;\n\ndefaultLogger.noConflict = function () {\n  if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType && window.log === defaultLogger) {\n    window.log = _log;\n  }\n\n  return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n  return _loggersByName;\n}; // ES6 default export, for compatibility\n\n\ndefaultLogger['default'] = defaultLogger;\nmodule.exports = defaultLogger;","map":{"version":3,"sources":["/Users/victor/Development/blend/client/node_modules/twilio-video/es5/vendor/loglevel.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","methodName","method","bind","Function","call","e","apply","arguments","traceForIE","console","log","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","getLevel","setLevel","persist","SILENT","setDefaultLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Copyright (c) 2013 Tim Perry\n * Licensed under the MIT license.\n *\n * Copied from https://github.com/pimterry/loglevel (1.7.0)\n * and modified to remove browser and AMD module support, while keeping CommonJS.\n * It was causing a conflict when this is bundled using CommonJS, and then loaded via RequireJS.\n * The proper way to fix this module is to have a build that outputs CommonJS and AMD separately\n * which needs to be submitted to the original module's repo.\n */\n\n/* istanbul ignore file */\n/* eslint-disable */\n// Slightly dubious tricks to cut down minimized file size\nvar noop = function noop() {};\nvar undefinedType = \"undefined\";\nvar isIE = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType && _typeof(window.navigator) !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n\nvar logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n// Cross-browser bind equivalent that works at least back to IE6\nfunction bindMethod(obj, methodName) {\n    var method = obj[methodName];\n    if (typeof method.bind === 'function') {\n        return method.bind(obj);\n    } else {\n        try {\n            return Function.prototype.bind.call(method, obj);\n        } catch (e) {\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n            return function () {\n                return Function.prototype.apply.apply(method, [obj, arguments]);\n            };\n        }\n    }\n}\n\n// Trace() doesn't print the message in IE, so for that case we need to wrap it\nfunction traceForIE() {\n    if (console.log) {\n        if (console.log.apply) {\n            console.log.apply(console, arguments);\n        } else {\n            // In old IE, native console methods themselves don't have apply().\n            Function.prototype.apply.apply(console.log, [console, arguments]);\n        }\n    }\n    if (console.trace) console.trace();\n}\n\n// Build the best logging method possible for this env\n// Wherever possible we want to bind, not wrap, to preserve stack traces\nfunction realMethod(methodName) {\n    if (methodName === 'debug') {\n        methodName = 'log';\n    }\n\n    if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === undefinedType) {\n        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    } else if (methodName === 'trace' && isIE) {\n        return traceForIE;\n    } else if (console[methodName] !== undefined) {\n        return bindMethod(console, methodName);\n    } else if (console.log !== undefined) {\n        return bindMethod(console, 'log');\n    } else {\n        return noop;\n    }\n}\n\n// These private functions always need `this` to be set properly\n\nfunction replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n        var methodName = logMethods[i];\n        this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n    }\n\n    // Define log.log as an alias for log.debug\n    this.log = this.debug;\n}\n\n// In old IE versions, the console isn't present until you first open it.\n// We build realMethod() replacements here that regenerate logging methods\nfunction enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n        if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) !== undefinedType) {\n            replaceLoggingMethods.call(this, level, loggerName);\n            this[methodName].apply(this, arguments);\n        }\n    };\n}\n\n// By default, we use closely bound real methods wherever possible, and\n// otherwise we wait for a console to appear, and then try again.\nfunction defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n}\n\nfunction Logger(name, defaultLevel, factory) {\n    var self = this;\n    var currentLevel;\n\n    var storageKey = \"loglevel\";\n    if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n    } else if ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) === \"symbol\") {\n        storageKey = undefined;\n    }\n\n    function persistLevelIfPossible(levelNum) {\n        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n        if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === undefinedType || !storageKey) return;\n\n        // Use localStorage if available\n        try {\n            window.localStorage[storageKey] = levelName;\n            return;\n        } catch (ignore) {}\n\n        // Use session cookie as fallback\n        try {\n            window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n        } catch (ignore) {}\n    }\n\n    function getPersistedLevel() {\n        var storedLevel;\n\n        if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === undefinedType || !storageKey) return;\n\n        try {\n            storedLevel = window.localStorage[storageKey];\n        } catch (ignore) {}\n\n        // Fallback to cookies if local storage gives us nothing\n        if ((typeof storedLevel === \"undefined\" ? \"undefined\" : _typeof(storedLevel)) === undefinedType) {\n            try {\n                var cookie = window.document.cookie;\n                var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n                if (location !== -1) {\n                    storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                }\n            } catch (ignore) {}\n        }\n\n        // If the stored level is not valid, treat it as if nothing was stored.\n        if (self.levels[storedLevel] === undefined) {\n            storedLevel = undefined;\n        }\n\n        return storedLevel;\n    }\n\n    /*\n     *\n     * Public logger API - see https://github.com/pimterry/loglevel for details\n     *\n     */\n\n    self.name = name;\n\n    self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n        \"ERROR\": 4, \"SILENT\": 5 };\n\n    self.methodFactory = factory || defaultMethodFactory;\n\n    self.getLevel = function () {\n        return currentLevel;\n    };\n\n    self.setLevel = function (level, persist) {\n        if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n            level = self.levels[level.toUpperCase()];\n        }\n        if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n            currentLevel = level;\n            if (persist !== false) {\n                // defaults to true\n                persistLevelIfPossible(level);\n            }\n            replaceLoggingMethods.call(self, level, name);\n            if ((typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === undefinedType && level < self.levels.SILENT) {\n                return \"No console available for logging\";\n            }\n        } else {\n            throw \"log.setLevel() called with invalid level: \" + level;\n        }\n    };\n\n    self.setDefaultLevel = function (level) {\n        if (!getPersistedLevel()) {\n            self.setLevel(level, false);\n        }\n    };\n\n    self.enableAll = function (persist) {\n        self.setLevel(self.levels.TRACE, persist);\n    };\n\n    self.disableAll = function (persist) {\n        self.setLevel(self.levels.SILENT, persist);\n    };\n\n    // Initialize with the right level\n    var initialLevel = getPersistedLevel();\n    if (initialLevel == null) {\n        initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n    }\n    self.setLevel(initialLevel, false);\n}\n\n/*\n *\n * Top-level API\n *\n */\n\nvar defaultLogger = new Logger();\n\nvar _loggersByName = {};\ndefaultLogger.getLogger = function getLogger(name) {\n    if ((typeof name === \"undefined\" ? \"undefined\" : _typeof(name)) !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n        throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n\n    var logger = _loggersByName[name];\n    if (!logger) {\n        logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n    return logger;\n};\n\n// Grab the current global log variable in case of overwrite\nvar _log = (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType ? window.log : undefined;\ndefaultLogger.noConflict = function () {\n    if ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) !== undefinedType && window.log === defaultLogger) {\n        window.log = _log;\n    }\n\n    return defaultLogger;\n};\n\ndefaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n};\n\n// ES6 default export, for compatibility\ndefaultLogger['default'] = defaultLogger;\n\nmodule.exports = defaultLogger;"]},"metadata":{},"sourceType":"script"}